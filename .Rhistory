# plot the lines, with transparency
for ( i in 1:20 ) curve( post$a[i] + post$b[i]*(x-mean(dN$weight)) , col=col.alpha("black",0.3) , add=TRUE )
N <- 150
dN <- d2[ 1:N , ]
mN <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b*( weight - mean(weight) ) ,
a ~ dnorm( 178 , 20 ) ,
b ~ dlnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 50 ) ) , data=dN )
# extract 20 samples from the posterior
post <- extract.samples( mN , n=20 )
a_avg <- mean(extract.samples( mN)$a)
b_avg <- mean(extract.samples( mN)$b)
# display raw data and sample size
plot( dN$weight , dN$height , xlim=range(d2$weight) , ylim=range(d2$height) , col=rangi2 , xlab="weight" , ylab="height" )+
mtext(concat("N = ",N))
curve( a_avg + b_avg*(x -  mean(dN$weight)) , add=TRUE ,  col=col.alpha("red",1))
# plot the lines, with transparency
for ( i in 1:20 ) curve( post$a[i] + post$b[i]*(x-mean(dN$weight)) , col=col.alpha("black",0.3) , add=TRUE )
post <- extract.samples( m4.3 )
mu_at_50 <- post$a + post$b * ( 50 - xbar )
dens( mu_at_50 , col=rangi2 , lwd=2 , xlab="mu|weight=50" )
post <- extract.samples( m4.3 )
xbar <- mean(d2$weight)
mu_at_50 <- post$a + post$b * ( 50 - xbar )
dens( mu_at_50 , col=rangi2 , lwd=2 , xlab="mu|weight=50" )
PI( mu_at_50 , prob=0.89 )
mu <- link( m4.3 )
str(mu)
# define sequence of weights to compute predictions for
# these values will be on the horizontal axis
weight.seq <- seq( from=25 , to=70 , by=1 )
# use link to compute mu # for each sample from posterior # and for each weight in weight.seq
mu <- link( m4.3 , data=data.frame(weight=weight.seq) )
str(mu)
mu <- link( m4.3 )
str(mu)
# define sequence of weights to compute predictions for
# these values will be on the horizontal axis
weight.seq <- seq( from=25 , to=70 , by=1 )
# use link to compute mu # for each sample from posterior # and for each weight in weight.seq
mu <- link( m4.3 , data=data.frame(weight=weight.seq) )
str(mu)
# define sequence of weights to compute predictions for
# these values will be on the horizontal axis
weight.seq <- seq( from=25 , to=70 , by=1 )
# define sequence of weights to compute predictions for
# these values will be on the horizontal axis
weight.seq <- seq( from=25 , to=70 , by=1 )
weight.seq
# use link to compute mu # for each sample from posterior # and for each weight in weight.seq
mu <- link( m4.3 , data=data.frame(weight=weight.seq) )
str(mu)
# use type="n" to hide raw data
plot( height ~ weight , d2 , type="n" )
# loop over samples and plot each mu value
for ( i in 1:100 ) points( weight.seq , mu[i,] , pch=16 , col=col.alpha(rangi2,0.1) )
plot( height ~ weight , d2 , type="n" )
# use type="n" to hide raw data
plot( height ~ weight , d2 , type="n" )
# loop over samples and plot each mu value
for ( i in 1:100 ) points( weight.seq , mu[i,] , pch=16 , col=col.alpha(rangi2,0.1) )
# summarize the distribution of mu
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI , prob=0.89 )
mu.mean
# plot raw data
# fading out points to make line and interval more visible
plot( height ~ weight , data=d2 , col=col.alpha(rangi2,0.5) )
# plot the MAP line, aka the mean mu for each weight
lines( weight.seq , mu.mean )
# plot a shaded region for 89% PI
shade( mu.PI , weight.seq )
# plot raw data
# use type="n" to hide raw data
plot( height ~ weight , d2 , type="n" )
# loop over samples and plot each mu value
for ( i in 1:100 ) points( weight.seq , mu[i,] , pch=16 , col=col.alpha(rangi2,0.1) )
# fading out points to make line and interval more visible
plot( height ~ weight , data=d2 , col=col.alpha(rangi2,0.5) )
# plot the MAP line, aka the mean mu for each weight
lines( weight.seq , mu.mean )
# plot a shaded region for 89% PI
shade( mu.PI , weight.seq )
# plot raw data
# use type="n" to hide raw data
plot( height ~ weight , d2 , type="n" )
# loop over samples and plot each mu value
for ( i in 1:100 ) points( weight.seq , mu[i,] , pch=16 , col=col.alpha(rangi2,0.1) )
# fading out points to make line and interval more visible
plot( height ~ weight , data=d2 , col=col.alpha(rangi2,0.5) )
# plot the MAP line, aka the mean mu for each weight
lines( weight.seq , mu.mean )
# plot a shaded region for 89% PI
shade( mu.PI , weight.seq )
# plot raw data
# use type="n" to hide raw data
# plot( height ~ weight , d2 , type="n" )
# loop over samples and plot each mu value
for ( i in 1:100 ) points( weight.seq , mu[i,] , pch=16 , col=col.alpha(rangi2,0.1) )
# plot raw data
# use type="n" to hide raw data
plot( height ~ weight , d2 , type="n" )
# loop over samples and plot each mu value
for ( i in 1:100 ) points( weight.seq , mu[i,] , pch=16 , col=col.alpha(rangi2,0.1) )
# fading out points to make line and interval more visible
plot( height ~ weight , data=d2 , col=col.alpha(rangi2,0.5) )
# plot the MAP line, aka the mean mu for each weight
lines( weight.seq , mu.mean ) # lines(x_vec,y_vec)
# plot a shaded region for 89% PI
shade( mu.PI , weight.seq )
# Remember link? now we are using sim() instead.
# use link to compute mu # for each sample from posterior # and for each weight in weight.seq
# mu <- link( m4.3 , data=data.frame(weight=weight.seq) )
# str(mu)
sim.height <- sim( m4.3 , data=list(weight=weight.seq) )
str(sim.height)
# Remember link? now we are using sim() instead.
# use link to compute mu # for each sample from posterior # and for each weight in weight.seq
# mu <- link( m4.3 , data=data.frame(weight=weight.seq) )
# str(mu)
sim.height <- sim( m4.3 , data=list(weight=weight.seq) )
str(sim.height)
height.PI <- apply( sim.height , 2 , PI , prob=0.89 )
height.PI
height.PI <- apply( sim.height , 2 , PI , prob=0.89 )
height.PI
# plot raw data
plot( height ~ weight , d2 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( weight.seq , mu.mean )
# draw HPDI region for line
shade( mu.HPDI , weight.seq )
height.PI <- apply( sim.height , 2 , PI , prob=0.89 )
mu.HPDI <- apply( mu , 2 , HPDI , prob=0.89 )
# plot raw data
plot( height ~ weight , d2 , col=col.alpha(rangi2,0.5) )
# draw MAP line
lines( weight.seq , mu.mean )
# draw HPDI region for line
shade( mu.HPDI , weight.seq )
# draw PI region for simulated heights
shade( height.PI , weight.seq )
library(rethinking)
data(Howell1)
d <- Howell1
str(d)
plot(height ~ weight, data = d)
d$weight_s <- ( d$weight - mean(d$weight) )/sd(d$weight)
d$weight_s2 <- d$weight_s^2
m4.5 <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b1*weight_s + b2*weight_s2 ,
a ~ dnorm( 178 , 20 ) ,
b1 ~ dlnorm( 0 , 1 ) ,
b2 ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 50 ) ), data=d )
precis( m4.5 )
d <- Howell1
d <- d %>%
mutate(weight_s =  d$weight - mean(d$weight) )/sd(d$weight),
d <- Howell1
d <- d %>%
mutate(weight_s =  d$weight - mean(d$weight) )/sd(d$weight),
d <- Howell1
d <- d %>%
mutate(weight_s =  d$weight - mean(d$weight) /sd(d$weight),
weight_s2 = d$weight_s^2 )
d <- Howell1
d <- d %>%
mutate(weight_s =  weight - mean(weight) /sd(weight),
weight_s2 = weight_s^2 )
m4.5 <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b1*weight_s + b2*weight_s2 ,
a ~ dnorm( 178 , 20 ) ,
b1 ~ dlnorm( 0 , 1 ) ,
b2 ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 50 ) ), data=d )
precis( m4.5 )
d <- Howell1
d$weight_s <- ( d$weight - mean(d$weight) )/sd(d$weight)
d <- Howell1
# d <- d %>%
#   mutate(weight_s =  weight - mean(weight) /sd(weight),
#         weight_s2 = weight_s^2 )
#
# d$weight_s <- ( d$weight - mean(d$weight) )/sd(d$weight)
# d$weight_s2 <- d$weight_s^2
m4.5 <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b1*weight_s + b2*weight_s2 ,
a ~ dnorm( 178 , 20 ) ,
b1 ~ dlnorm( 0 , 1 ) ,
b2 ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 50 ) ), data=d )
d <- Howell1
# d <- d %>%
#   mutate(weight_s =  weight - mean(weight) /sd(weight),
#         weight_s2 = weight_s^2 )
#
d$weight_s <- ( d$weight - mean(d$weight) )/sd(d$weight)
d$weight_s2 <- d$weight_s^2
m4.5 <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b1*weight_s + b2*weight_s2 ,
a ~ dnorm( 178 , 20 ) ,
b1 ~ dlnorm( 0 , 1 ) ,
b2 ~ dnorm( 0 , 1 ) ,
sigma ~ dunif( 0 , 50 ) ), data=d )
precis( m4.5 )
weight.seq <- seq( from=-2.2 , to=2 , length.out=30 )
pred_dat <- list( weight_s=weight.seq , weight_s2=weight.seq^2 )
mu <- link( m4.5 , data=pred_dat ) mu.mean <- apply( mu , 2 , mean )
weight.seq <- seq( from=-2.2 , to=2 , length.out=30 )
pred_dat <- list( weight_s=weight.seq , weight_s2=weight.seq^2 )
mu <- link( m4.5 , data=pred_dat )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI , prob=0.89 )
sim.height <- sim( m4.5 , data=pred_dat )
height.PI <- apply( sim.height , 2 , PI , prob=0.89 )
# then we plot
plot( height ~ weight_s , d , col=col.alpha(rangi2,0.5) )
lines( weight.seq , mu.mean )
shade( mu.PI , weight.seq )
shade( height.PI , weight.seq )
weight.seq <- seq( from=-2.2 , to=2 , length.out=30 )
pred_dat <- list( weight_s=weight.seq , weight_s2=weight.seq^2 )
mu <- link( m4.5 , data=pred_dat )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI , prob=0.89 )
sim.height <- sim( m4.5 , data=pred_dat )
height.PI <- apply( sim.height , 2 , PI , prob=0.89 )
# then we plot
plot( height ~ weight_s , d , col=col.alpha(rangi2,0.5) )
lines( weight.seq , mu.mean )
shade( mu.PI , weight.seq )
shade( height.PI , weight.seq )
d$weight_s3 <- d$weight_s^3
m4.6 <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b1*weight_s + b2*weight_s2 + b3*weight_s3 ,
a ~ dnorm( 178 , 20 ) ,
b1 ~ dlnorm( 0 , 1 ) ,
b2 ~ dnorm( 0 , 10 ) ,
b3 ~ dnorm( 0 , 10 ) ,
sigma ~ dunif( 0 , 50 )), data = d)
weight.seq <- seq( from=-2.2 , to=2 , length.out=30 )
pred_dat <- list( weight_s=weight.seq , weight_s2=weight.seq^2 )
mu <- link( m4.5 , data=pred_dat )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI , prob=0.89 )
sim.height <- sim( m4.5 , data=pred_dat )
height.PI <- apply( sim.height , 2 , PI , prob=0.89 )
plot( height ~ weight_s , d , col=col.alpha(rangi2,0.5) )
lines( weight.seq , mu.mean )
shade( mu.PI , weight.seq )
shade( height.PI , weight.seq )
d$weight_s3 <- d$weight_s^3
m4.6 <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b1*weight_s + b2*weight_s2 + b3*weight_s3 ,
a ~ dnorm( 178 , 20 ) ,
b1 ~ dlnorm( 0 , 1 ) ,
b2 ~ dnorm( 0 , 10 ) ,
b3 ~ dnorm( 0 , 10 ) ,
sigma ~ dunif( 0 , 50 )), data = d)
weight.seq <- seq( from=-2.2 , to=2 , length.out=30 )
pred_dat <- list( weight_s=weight.seq , weight_s2=weight.seq^2 )
mu <- link( m4.6 , data=pred_dat )
d$weight_s3 <- d$weight_s^3
m4.6 <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b1*weight_s + b2*weight_s2 + b3*weight_s3 ,
a ~ dnorm( 178 , 20 ) ,
b1 ~ dlnorm( 0 , 1 ) ,
b2 ~ dnorm( 0 , 10 ) ,
b3 ~ dnorm( 0 , 10 ) ,
sigma ~ dunif( 0 , 50 )), data = d)
weight.seq <- seq( from=-2.2 , to=2 , length.out=30 )
pred_dat <- list( weight_s=weight.seq , weight_s2=weight.seq^2 , weight_s3= weight.seq^3)
mu <- link( m4.6 , data=pred_dat )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI , prob=0.89 )
sim.height <- sim( m4.5 , data=pred_dat )
height.PI <- apply( sim.height , 2 , PI , prob=0.89 )
plot( height ~ weight_s , d , col=col.alpha(rangi2,0.5) )
lines( weight.seq , mu.mean )
shade( mu.PI , weight.seq )
shade( height.PI , weight.seq )
d$weight_s3 <- d$weight_s^3
m4.6 <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b1*weight_s + b2*weight_s2 + b3*weight_s3 ,
a ~ dnorm( 178 , 20 ) ,
b1 ~ dlnorm( 0 , 1 ) ,
b2 ~ dnorm( 0 , 10 ) ,
b3 ~ dnorm( 0 , 10 ) ,
sigma ~ dunif( 0 , 50 )), data = d)
weight.seq <- seq( from=-2.2 , to=2 , length.out=30 )
pred_dat <- list( weight_s=weight.seq , weight_s2=weight.seq^2 , weight_s3= weight.seq^3)
mu <- link( m4.6 , data=pred_dat )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI , prob=0.89 )
sim.height <- sim( m4.6 , data=pred_dat )
height.PI <- apply( sim.height , 2 , PI , prob=0.89 )
plot( height ~ weight_s , d , col=col.alpha(rangi2,0.5) )
lines( weight.seq , mu.mean )
shade( mu.PI , weight.seq )
shade( height.PI , weight.seq )
d$weight_s3 <- d$weight_s^3
m4.6 <- quap(
alist( height ~ dnorm( mu , sigma ) ,
mu <- a + b1*weight_s + b2*weight_s2 + b3*weight_s3 ,
a ~ dnorm( 178 , 20 ) ,
b1 ~ dlnorm( 0 , 1 ) ,
b2 ~ dnorm( 0 , 10 ) ,
b3 ~ dnorm( 0 , 10 ) ,
sigma ~ dunif( 0 , 50 )), data = d)
weight.seq <- seq( from=-2.2 , to=2 , length.out=30 )
pred_dat <- list( weight_s=weight.seq , weight_s2=weight.seq^2 , weight_s3= weight.seq^3)
mu <- link( m4.6 , data=pred_dat )
mu.mean <- apply( mu , 2 , mean )
mu.PI <- apply( mu , 2 , PI , prob=0.89 )
sim.height <- sim( m4.6 , data=pred_dat )
height.PI <- apply( sim.height , 2 , PI , prob=0.89 )
plot( height ~ weight_s , d , col=col.alpha(rangi2,0.5) )
mtext("cubic")
lines( weight.seq , mu.mean )
shade( mu.PI , weight.seq )
shade( height.PI , weight.seq )
library(rethinking)
data(cherry_blossoms)
d <- cherry_blossoms
precis(d)
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)
library(rethinking)
library(magrittr)
library(tidyverse)
# add other packages you use here
mu <- rnorm(0,10)
?rnorm
y <- rnorm(100, mu, sigma)
N <- 1000
mu <- rnorm(N, 0,10)
sigma <- rexp(n = N, 1)
y <- rnorm(100, mu, sigma)
dens(y)
y <- rnorm(10e4, mu, sigma)
dens(y)
y <- rnorm(1e4, mu, sigma)
dens(y)
sim_prior <- quap(
alist( y ~ dnorm( mu , sigma ) ,
mu ~ dnorm( 0, 10 ) ,
sigma ~ dexp(1 ) ), data = y)
sim_prior <- quap(
alist( y ~ dnorm( mu , sigma ) ,
mu ~ dnorm( 0, 10 ) ,
sigma ~ dexp(1 ) ))
sim_prior <- quap(
alist( y ~ dnorm( mu , sigma ) ,
mu ~ dnorm( 0, 10 ) ,
sigma ~ dexp(1 ) ), data = y)
sigma ~ dexp(1 )
dexp(1 )
dnorm( 0, 10 )
library(rethinking)
data(cherry_blossoms)
d <- cherry_blossoms
precis(d)
plot(temp~dens, data = d)
plot(temp~year, data = d)
d <- data("WaffleDivorce")
library(rethinking)
d <- data("WaffleDivorce")
View(WaffleDivorce)
library(rethinking)
d <- data("WaffleDivorce")
precis(d)
library(rethinking)
data("WaffleDivorce")
d <- WaffleDivorce
precis(d)
d %>%
ggplot(aes(x = WaffleHouses, y = Divorce)) +
geom_point(aes(color = South))
d %>%
ggplot(aes(x = WaffleHouses, y = Divorce, label = Loc)) +
geom_point(aes(color = South)) +
geom_smooth()
d %>%
ggplot(aes(x = WaffleHouses, y = Divorce, label = Loc)) +
geom_point(aes(color = South)) +
geom_smooth(method = "lm")
d %>%
ggplot(aes(x = WaffleHouses, y = Divorce, label = Loc)) +
geom_point(aes(color = South), size = 1) +
geom_smooth(method = "lm")
d %>%
ggplot(aes(x = WaffleHouses, y = Divorce, label = Loc)) +
geom_point(aes(color = South), size = 3) +
geom_smooth(method = "lm")
d %>%
ggplot(aes(x = WaffleHouses, y = Divorce, label = as.character(Loc))) +
geom_point(aes(color = South), size = 3) +
geom_smooth(method = "lm")
d %>%
mutate(Loc_nonFac = as.character(Loc)) %>%
ggplot(aes(x = WaffleHouses, y = Divorce, label = Loc_nonFac)) +
geom_point(aes(color = South), size = 3) +
geom_smooth(method = "lm")
# standardize variables
d$A <- scale( d$MedianAgeMarriage )
d$D <- scale( d$Divorce )
sd( d$MedianAgeMarriage )
plot(data = d, Divorce  ~ Marriage)
plot(data = d, Divorce  ~ Marriage, color = "blue")
plot(data = d, Divorce  ~ Marriage, col=col.alpha(rangi2,0.5) )
plot(data = d, Divorce  ~ Marriage, col=col.alpha(rangi2,0.4) )
plot(data = d, Divorce  ~ Marriage, col=col.alpha(rangi2,0.7) )
m5.1 <- quap(
alist(
D ~ dnorm( mu , sigma ) ,
mu <- a + bA * A ,
a ~ dnorm( 0 , 0.2 ) ,
bA ~ dnorm( 0 , 0.5 ) ,
sigma ~ dexp( 1 ) ) , data = d )
m5.1 <- quap(
alist(
D ~ dnorm( mu , sigma ) ,
mu <- a + bA * A ,
a ~ dnorm( 0 , 0.2 ) ,
bA ~ dnorm( 0 , 0.5 ) ,
sigma ~ dexp( 1 ) ) , data = d )
set.seed(10)
prior <- extract.prior( m5.1 )
mu <- link( m5.1 , post=prior , data=list( A=c(-2,2) ) )
plot( NULL , xlim=c(-2,2) , ylim=c(-2,2) )
for ( i in 1:50 ) lines( c(-2,2) , mu[i,] , col=col.alpha("black",0.4) )
# compute percentile interval of mean
A_seq <- seq( from=-3 , to=3.2 , length.out=30 )
mu <- link( m5.1 , data=list(A=A_seq) )
mu.mean <- apply( mu , 2, mean )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( D ~ A , data=d , col=rangi2 )
lines( A_seq , mu.mean ,lwd=2 )
shade( mu.PI , A_seq )
# compute percentile interval of mean
A_seq <- seq( from=-3 , to=3.2 , length.out=30 )
mu <- link( m5.1 , data=list(A=A_seq) )
mu.mean <- apply( mu , 2, mean )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( D ~ A , data=d , col=rangi2 )
lines( A_seq , mu.mean ,lwd=2 )
shade( mu.PI , A_seq )
d$M <- scale( d$Marriage )
m5.2 <- quap(
alist( D ~ dnorm( mu , sigma ) ,
mu <- a + bM * M ,
a ~ dnorm( 0 , 0.2 ) ,
bM ~ dnorm( 0 , 0.5 ) ,
sigma ~ dexp( 1 ) ) , data = d )
d$M <- scale( d$Marriage )
m5.2 <- quap(
alist( D ~ dnorm( mu , sigma ) ,
mu <- a + bM * M ,
a ~ dnorm( 0 , 0.2 ) ,
bM ~ dnorm( 0 , 0.5 ) ,
sigma ~ dexp( 1 ) ) , data = d )
# compute percentile interval of mean
M_seq <- seq( from=-3 , to=3.2 , length.out=30 )
mu <- link( m5.1 , data=list(M=M_seq) )
d$M <- scale( d$Marriage )
m5.2 <- quap(
alist( D ~ dnorm( mu , sigma ) ,
mu <- a + bM * M ,
a ~ dnorm( 0 , 0.2 ) ,
bM ~ dnorm( 0 , 0.5 ) ,
sigma ~ dexp( 1 ) ) , data = d )
# compute percentile interval of mean
M_seq <- seq( from=-3 , to=3.2 , length.out=30 )
mu <- link( m5.2 , data=list(M=M_seq) )
mu.mean <- apply( mu , 2, mean )
mu.PI <- apply( mu , 2 , PI )
# plot it all
plot( D ~ M , data=d , col=rangi2 )
lines( M_seq , mu.mean , lwd=2 )
shade( mu.PI , M_seq )
library(dagitty)
dag5.1 <- dagitty( "dag { A -> D A -> M M -> D }")
coordinates(dag5.1) <- list( x=c(A=0,D=1,M=2) , y=c(A=0,D=1,M=0) )
drawdag( dag5.1 )
drawdag( dag5.1 )
m5.3 <- quap(
alist( D ~ dnorm( mu , sigma ) ,
mu <- a + bM*M + bA*A ,
a ~ dnorm( 0 , 0.2 ) ,
bM ~ dnorm( 0 , 0.5 ) ,
bA ~ dnorm( 0 , 0.5 ) ,
sigma ~ dexp( 1 ) ) , data = d )
precis( m5.3 )
plot( coeftab(m5.1,m5.2,m5.3), par=c("bA","bM") )
m5.4 <- quap(
alist( M ~ dnorm( mu , sigma ) , mu <- a + bAM * A , a ~ dnorm( 0 , 0.2 ) , bAM ~ dnorm( 0 , 0.5 ) , sigma ~ dexp( 1 ) ) , data = d )
