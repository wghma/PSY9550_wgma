{"frames":[{"func":"ulam(alist(log_gdp_std ~ dnorm(mu, sigma), mu <- a[cid] + b[cid] * \n    (rugged_std - 0.215), a[cid] ~ dnorm(1, 0.1), b[cid] ~ dnorm(0, \n    0.3), sigma ~ dunif(0, 10)), data = dat_slim, chains = 4, \n    cores = 4, iter = 1000)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stan(model_code = model_code, data = data, pars = use_pars, chains = chains, \n    cores = cores, iter = iter, control = control, warmup = warmup, \n    ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stan_model(file, model_name = model_name, model_code = model_code, \n    stanc_ret = NULL, boost_lib = boost_lib, eigen_lib = eigen_lib, \n    save_dso = save_dso, verbose = verbose)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"cxxfunctionplus(signature(), body = paste(\" return Rcpp::wrap(\\\"\", \n    model_name, \"\\\");\", sep = \"\"), includes = inc, plugin = \"rstan\", \n    save_dso = save_dso | auto_write, module_name = paste(\"stan_fit4\", \n        model_cppname, \"_mod\", sep = \"\"), verbose = verbose)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"sink(type = \"output\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in sink(type = \"output\") : invalid connection\n"}