---
title: "PSY9550 Chapter 3"
author: "Alecandra & Winnie"
date: 02-21-2024     # Obs! American date format
format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
    page-layout: full
    html-math-method: katex
editor: source
---

```{css, echo = F}
body{
  font-family: Helvetica;
  font-size: 16pt;
  max-width: 1000px;
  margin: auto;
  margin-left:310px;
}
pre{
  font-size: 14px;
}
/* Headers */
h1{
    font-size: 24pt;
  }
h1,h2{
    font-size: 20pt;
  }
h3,h4,h5,h6{
  font-size: 18pt;
}
#TOC {
  position: fixed;
  left: 0;
  top: 0;
  width: 300px;
  height: 100%;
  overflow:auto;
}
```

```{r setup,}
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)

library(rethinking)
library(magrittr)
library(tidyverse)

# add other packages you use here
```

# Chapter 3 (all easy exercises)

```{r}

p_grid <- seq( from=0 , to=1 , length.out=1000 ) 
prior <- rep( 1 , 1000 ) 
likelihood <- dbinom( 6 , size=9 , prob=p_grid ) 
posterior <- likelihood * prior 
posterior <- posterior / sum(posterior) 

set.seed(100) 
n_samples = 1e4 
samples <- sample( p_grid , prob=posterior , size=n_samples , replace=TRUE )

samples[1:10]
```

```{r}
plot(samples)
```

## 3E1. samples below p=0.2

```{r}
sum(samples < 0.2)/n_samples
# mean(samples < 0.2)
```

## 3E2. samples above p = 0.8?

```{r}
sum(samples > 0.8)/n_samples

```

## 3E3. samples between p = 0.2 and p = 0.8

How much posterior probability lies between p = 0.2 and p = 0.8?

```{r}
sum(samples > 0.2 & samples < 0.8)/n_samples

#note to self: mean(between(samples, 0.2, 0.8))
```

## 3E4. prob mass 20% below which p

20% of the posterior probability lies below which value of p?

```{r}

quantile (samples, 0.2)

```

## 3E5. prob mass 20% above which p

20% of the posterior probability lies above which value of p?

```{r}
quantile(samples, 0.8)

```

## 3E6. Narrowest interval with prob mass = 66%

Which values of p contain the narrowest interval equal to 66% of the posterior probability?

```{r}

HPDI( samples , prob=0.66 )

```

## 3E7. assume equal prob mass each side of interval of prob mass 66%

Which values of p contain 66% of the posterior probability, assuming equal posterior probability both below and above the interval? Equal posterior probability on both sides of the interval means the middle p of the interval is the median. there are 34%/2 = 17% on each side. Check for p at prob mass 17% and 83% (100-17).

```{r}
# lower p 
quantile(samples, 0.17)

```

```{r}
# high p
quantile(samples, 0.83)

# or: PI(samples, prob = 0.66)
```

# Chapter 3 (M1-M5)

## 3M1. W=8, N =15

Suppose the globe tossing data had turned out to be 8 water in 15 tosses. Construct the posterior distribution, using grid approximation. Use the same flat prior as before.

```{r}

grid_size = 1000

p_grid <- seq( from=0 , to=1 , length.out=grid_size ) 
prior <- rep( 1 , grid_size ) 
likelihood <- dbinom( 8 , size=15 , prob=p_grid ) 

posterior_uni <- likelihood * prior 
posterior_uni <- posterior_uni / sum(posterior_uni) 

```

```{r, warning = F}
plot( p_grid , posterior_uni , 
      type="b" , 
      xlab="probability of water" , 
      ylab="posterior probability" ) 
mtext( "1000 points. Data: 8 water of 15 tosses" )
```

## 3M2. grid_size = 10000

Draw 10,000 samples from the grid approximation from above. Then use the samples to calculate the 90% HPDI for p.

```{r}

#posterior_uni

set.seed(57) 
n_samples = 1e4 
samples_uni <- sample( p_grid , prob=posterior_uni , size=n_samples , replace=TRUE )
HPDI( samples_uni , prob=0.9 )
```

## 3M3. 8/15 posterior -\> samples , p for 8/15

Construct a posterior predictive check for this model and data. This means simulate the distribution of samples, averaging over the posterior uncertainty in p. What is the probability of observing 8 water in 15 tosses?

```{r}
#posterior_uni
#sample_uni
set.seed(57) 
n=15

n_simulations = 1e4
simulated_data_uni <-  rbinom( n_simulations , size=n , prob=samples )
simulated_data_uni[1:10]

```

The probability of observing 8 water out of 15 tosses from the simulated data is 15%.

```{r}

table(simulated_data_uni)/n_simulations

```

## 3M4. posterior 8/15, p for 6/9

Using the posterior distribution constructed from the new (8/15) data, now calculate the probability of observing 6 water in 9 tosses.

```{r}

n_simulations = 1e4
simulated_data_uni <-  rbinom( n_simulations , size=9 , prob=samples )
simulated_data_uni[1:10]

```

The probability of observing 6 water out of 9 tosses from the simulated data is 20.0%.

```{r}

table(simulated_data_uni)/n_simulations

```

## 3M5.

Start over at 3M1, but now use a prior that is zero below p = 0.5 and a constant above p = 0.5. This corresponds to prior information that a majority of the Earth’s surface is water. Repeat each problem above and compare the inferences. What difference does the better prior make? If it helps, compare inferences (using both priors) to the true value p = 0.7.

```{r}

grid_size = 1000
w = 8
n = 15

p_grid <- seq( from=0 , to=1 , length.out=grid_size ) 
prior <- prior <- 1*(p_grid>= 0.5) 
likelihood <- dbinom( w , size=n , prob=p_grid ) 

# dich = dichotomous
posterior_dich <- likelihood * prior 
posterior_dich <- posterior_dich / sum(posterior_dich) 

```

```{r, warning = F}
plot( p_grid , posterior_dich , 
      type="b" , 
      xlab="probability of water" , 
      ylab="posterior probability" ) 
mtext( "1000 points. Data: 8 water of 15 tosses. prior 0 and 1 at p=0.5" )
```

The 90% HPDI for p.(3M2)

```{r}
set.seed(57) 
n_samples = 1e4 
samples_dich <- sample( p_grid , prob=posterior_dich , size=n_samples , replace=TRUE )
HPDI( samples_dich , prob=0.9 )
```

(3M3) The probability of observing 8 water out of 15 tosses from the simulated data is 15.8%. A uniform prior gave us 15.0% earlier.

```{r}
n_simulations = 1e4
simulated_data_dich <-  rbinom( n_simulations , size=15 , prob=samples_dich )
# simulated_data[1:10]
table(simulated_data_dich)/n_simulations

# or: mean(simulated_data_dich == 8)
```

(3M4) The probability of observing 6 water out of 9 tosses from the simulated data is 19.9%. For an uniform prior the probability was 20.0%.

```{r}
n_simulations = 1e4
simulated_data_dich <-  rbinom( n_simulations , size=9 , prob=samples )
# simulated_data[1:10]
table(simulated_data_dich)/n_simulations
```

Comparing distribution of simulated samples for two priors: uniform and dichotomous at p=0.5. We also compare it to the simulated distribution assuming p=0.7 as true value.

```{r}
simulated_data_real <-  rbinom( n_simulations , size=9 , prob=0.7 )
```

When plotting the distributions of the simulated data, the two distributions based on data 8 water out of 15 tosses seem to have almost identical overlapping distributions (even when they have different priors).

```{r}
# library(tidyverse)
data.frame(prior=prior, 
           uni = simulated_data_uni,
           dich=simulated_data_dich, 
           real=simulated_data_real) %>% 
tibble() %>% 
pivot_longer(!prior, names_to = "sim", values_to = "value") %>% 

ggplot(aes(x=value, fill=sim, color =sim))+
  geom_density(bw = 1, alpha = 0.5)+
# geom_histogram(alpha=0.7, position = "identity")+
  scale_x_continuous(breaks = seq(1,12,1) )


```


## 3M6. 99% prob mass within 0.05 width of interval. 
Suppose you want to estimate the Earth’s proportion of water very precisely. Specifically, you want the 99% percentile interval of the posterior distribution of p to be only 0.05 wide. This means the distance between the upper and lower bound of the interval should be 0.05. How many times will you have to toss the globe to do this?

So I assume we are talking about the posterior predictive interval and not a 99% interval of the posterior distribution itself.
We also need to assume a number of successful observations from our tosses. Since number of tosses changes, the number of observations also changes. The solutions show that we can set the real p as 0.7 and from there rbinom draw n_obs.

```{r}


grid_size = 1000
p_grid <- seq( from=0 , to=1 , length.out=grid_size )


# returns a signle named value
sampling_interval <- function(tosses){
n_obs = rbinom(1, size = tosses, prob = 0.7)
  
prior <- rep( 1 , grid_size ) 
likelihood <- dbinom( n_obs , size=tosses , prob=p_grid ) 

posterior<- likelihood * prior 
posterior <- posterior / sum(posterior) 

samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T) # what does replace = T mean?
  interval <- PI(samples, prob = 0.99)
  width <- interval[2] - interval[1]
}

# seq_len(3) = 1 2 3
# Number of reps running the function sampling_interval. One row per sampling_interval.

# Results in a tibble with rows = reps, and two columns: tosses, width
single_cond <- function(tosses, reps = 100) {
  tibble(tosses = tosses,
         # prior_type = prior_type,
         width = map_dbl(seq_len(reps), ~sampling_interval(tosses = tosses)))
}


# not sure what crossing() does...
# First: makes a vector of tosses.
simulation <- crossing(tosses = seq(1000, 5000, by = 100) ) %>%
  pmap_dfr(single_cond, reps = 100) %>%   # 2. apply single_cond on each row in the tibble. Which means this code line gives nrows = 100 reps*length(vector tosses) 
  group_by(tosses) %>%
  summarize(avg_width = mean(width), .groups = "drop")
  # mutate(prior_type = case_when(prior_type == "uniform" ~ "Uniform Prior",
  #                               prior_type == "step" ~ "Step Prior"),
  #        prior_type = factor(prior_type, levels = c("Uniform Prior",
  #                                                   "Step Prior")))

ggplot(simulation, aes(x = tosses, y = avg_width)) +
  # facet_wrap(~prior_type, nrow = 1) +
  geom_point() +
  geom_line() +
  # scale_x_comma() +
  labs(x = "Tosses", y = "Average Interval Width") +
  theme(panel.spacing.x = unit(2, "lines"))


```



```{r}

# number of tosses that result in a 99% probability mass within a 0.05 interval.
simulation %>% 
  filter(avg_width <= 0.05) %>% 
  slice(1:1)
```

# Hard

```{r}
library(rethinking) 
data(homeworkch3) # loads birth1 and birth2
```

These data indicate the gender (male=1, female=0) of officially reported first and second born children in 100 two-child families.

So for example, the first family in the data reported a boy (1) and then a girl (0). The second family reported a girl (0) and then a boy (1). The third family reported two girls.

## 3H1. 

Using grid approximation, compute the posterior distribution for the probability of a birth being a boy. Assume a uniform prior probability. Which parameter value maximizes the posterior probability?



```{r}
total_births <- c(birth1, birth2)

grid_size = 1000
boys = sum(total_births == 1)
n = 200

p_grid <- seq( from=0 , to=1 , length.out=grid_size ) 
prior <- rep(1,grid_size)
likelihood <- dbinom( boys , size=n , prob=p_grid ) 


posterior <- likelihood * prior 
posterior <- posterior / sum(posterior) 

p_grid[which.max(posterior)]  # finds the index where the maximum posterior values is

```

## 3H2. draw 10000 samples

Using the sample function, draw 10,000 random parameter values from the posterior distribution you calculated above. Use these samples to estimate the 50%, 89%, and 97% highest posterior density intervals. 

Oja, trengte ikke lage en svær greie ut av det...
```{r}

samples <- sample(p_grid, prob = posterior, size = 1e4, replace = T)

# tibble(
#   prob = c(0.5, 0.89, 0.97),
#   # width = map_dbl( seq_len(3), ~HPDI(prob = prob))
#   width = HDPI(prob = prob)
#   )

HPDI(samples, prob = c(0.50, 0.89, 0.97))


```




## 3H3. 
Use rbinom to simulate 10,000 replicates of 200 births. You should end up with 10,000 numbers, each one a count of boys out of 200 births. Compare the distribution of predicted numbers of boys to the actual count in the data (111 boys out of 200 births). There are many good ways to visualize the simulations, but the dens command (part of the rethinking package) is probably the easiest way in this case. Does it look like the model fits the data well? That is, does the distribution of predictions include the actual observation as a central, likely outcome? 

```{r}

# using which prob? p max = 0.5545546

simulations <- rbinom(10000, size = 200, 0.5545546)

dens(simulations)

```
THe median value of the simulations are 111 boys. Seems like the model fits well.

```{r}

median(simulations)


```

## 3H4. 
Now compare 10,000 counts of boys from 100 simulated first borns only to the number of boys in the first births, birth1. How does the model look in this light?

```{r}

# library(ggrepel)

set.seed(301)
b <- rbinom(1e4, size = 100, prob = samples)


ggplot() +
  geom_histogram(aes(x=b), binwidth = 1)+
  # stat_histinterval(aes(x = b), .width = c(0.66, 0.89), breaks = break_func) +
  geom_vline(aes(xintercept = sum(birth1)), linetype = "dashed",
             color = "red") +
  labs(x = "Number of Boys", y = "Density")
```




## 3H5. 
The model assumes that sex of first and second births are independent. To check this assumption, focus now on second births that followed female first borns. Compare 10,000 simulated counts of boys to only those second births that followed girls.(simulate using the probability of the previous model) To do this correctly, you need to count the number of first borns who were girls and simulate that many births, 10,000 times. Compare the counts of boys in your simulations to the actual observed count of boys following girls. How does the model look in this light? Any guesses what is going on in these data?

```{r}

tibble(birth1, birth2) %>% 
  filter(birth1 == 0) %>% 
count()

# second born given that first born was a girl
birth2[birth1 == 0]
length(birth2[birth1 == 0]) # 49 children
sum(birth2[birth1 == 0] == 1) # 39 boys / 49 children

```

The model is severely under estimating the number of second-born boys when the first born child is a girl. Thus, our assumption that births are independent appears to be violated.
```{r}

simulations_boys2_girls1 <- rbinom(10000, size = 49, prob = samples)

ggplot() +
  geom_histogram(aes(x=simulations_boys2_girls1), binwidth = 1)+
  # stat_histinterval(aes(x = b), .width = c(0.66, 0.89), breaks = break_func) +
  geom_vline(aes(xintercept = 39), linetype = "dashed",
             color = "red") +
  labs(x = "Number of 2nd born Boys given 1st born is a girl", y = "Density")


```


# Clarification and or discussion questions

How can the 90% -intervals be so different in width, but look so alike when plotting density distributions?

```{r}
HPDI(samples_uni, prob = 0.9)

```
```{r}

HPDI(samples_dich, prob = 0.9)
``