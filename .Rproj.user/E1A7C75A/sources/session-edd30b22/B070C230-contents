

# Hei!

# Det er 5 hovedseksjoner i denne filen.

# 0. Baseline data fra Ruter + andre
# 1. w_total (tar for seg nettskjema fra november-des.)
# 2. Juni
# 3. Juli (justert for duplikat av 153 respondenter som vil dekkes av juni)
#   --- her bindes all reisedata sammen. Det lages en personfil og reisefil, de lagres som csv,
#       slik at man ikke er nødt til å kjøre hele skriptet om igjen hver gang ---
# 4. Grafer ( kode som kun lager grafer og tabeller med automatisk lagring.
#    Husk å sette working directory for det filområdet du vil excelRVU alt til.)

# jeg har ikke bind_rows() wsettene fordi jeg ikke vet om bedre måter, samt pga:
# w_total og juni/juli har ulik formulering av noen spørsmål, så de refereres til ulikt
# juni og juli, har ulike antall alternativer for reisemidler som gjør det vanskelig å håndtere begge med lik kode


# working directory er RVU_korona_github



# Nedlaste pakker -------------------------------------------------------------------


library(tidyverse)
library(readxl)
library(naniar)
library(xlsx)
library(lubridate)
library(scales)




Sys.setlocale(locale = "English")

setwd("~/00_PhD_lokal/RVU_corona/RVU_korona_github")



# 0: Baseline data (Ruter m.fl) --------------------------------------------------------

# Relative change in PT trips (for Nordland and Alesund) are in regard to january 2019.


month_vec <- month.abb[1:38%%13]
month_levels <- paste0(month_vec, "'", c(rep(19,12),rep(20,12),rep(21,12) ))

# for Alesund we choose to look at ordinary trips only and NOT school trips
alesund0 <- read_excel("~/00_PhD_lokal/RVU_corona/RVU_korona_github/Baseline_data/Buss_Alesund_010119_310721.xlsx")
alesund <- alesund0 %>% 
  select(c(1,2,3)) %>%   
  setNames(c("year", "mnd", "alesund_total")) %>% 
  mutate(alesund_relative = alesund_total/first(alesund_total) -1,
         mnd = month_vec[1:nrow(.)],
         year_month = paste0(mnd, "'", str_sub(year, -2,-1))
  ) %>% 
  select(year_month,alesund_relative, alesund_total )
   


nordland <- read_excel("~/00_PhD_lokal/RVU_corona/RVU_korona_github/Baseline_data/NFK_jan2019_now.xlsx") %>% 
  select(c(1,2,5)) %>% 
  setNames(c("year", "mnd", "nordland_total")) %>% 
  mutate(nordland_relative = nordland_total/first(nordland_total) -1,
         mnd = month_vec[1:nrow(.)],
         year_month = paste0(mnd, "'", str_sub(year, -2,-1))
) %>% 
  select(year_month,nordland_relative, nordland_total )
  
oslo <- read_excel("~/00_PhD_lokal/RVU_corona/RVU_korona_github/Baseline_data/Ruter_2020_2021_litentabell_20210902.xlsx") %>% 
  setNames(c("year", "mnd", "oslo_relative")) %>% 
  slice(-1) %>% 
  mutate(mnd = month_vec[1:nrow(.)],
         year_month = paste0(mnd, "'", str_sub(year, -2,-1)),
         oslo_relative = as.double(oslo_relative)
         ) %>% 
  select(year_month,oslo_relative)

hordaland <- read_excel("Baseline_data/Gamletall_Hordaland.xlsx") %>% 
  setNames(c("year", "mnd", "hordaland_total")) %>% 
  mutate(hordaland_relative = hordaland_total/first(hordaland_total) -1,
         mnd = month_vec[1:nrow(.)],
         year_month = paste0(mnd, "'", str_sub(year, -2,-1))
         #oslo_relative = as.double(hordaland_total)
  ) %>% 
  select(year_month, hordaland_relative, hordaland_total)


relative <- full_join(alesund,nordland, by = "year_month") %>% 
  full_join(oslo, by = "year_month") %>% 
  full_join(hordaland, by = "year_month") %>% 
  mutate(year_month = factor(year_month, levels = month_levels)) %>% 
  select(year_month, contains("relative")) %>%
  rename("Ålesund city" = alesund_relative,
         "Nordland county" = nordland_relative, 
         "Oslo city" = oslo_relative,
         "Hordaland county" = hordaland_relative) %>% 
  pivot_longer(!year_month, names_to = "sted", values_to = "Relative_change")

relative %>% 
  ggplot(aes(x = year_month, y = Relative_change, color = sted, group = sted)) +
  geom_point() +
  geom_line() +
  scale_y_continuous(labels = scales::percent) +
  theme(title = element_text(size = 7),
        legend.title = element_blank(), 
        axis.title = element_text(size = 6), 
        axis.text = element_text(size = 7),
        axis.text.x = element_text(angle = 90),
        legend.key.size = unit(4, "mm"), 
        legend.background = element_rect(fill = NA),
        legend.position = c(0.87, 0.83),
        legend.text = element_text(size = 7)
  ) +
  labs(x = "", y = "")

ggsave(path = "RVUcorona_ggsave_output" , "PT_change_2019_2021.png", width = 160, height = 60, units = "mm")  
 
  



# nedgang Oslo 2019 - 2020, tall fra SSB
100*75620/163650
# monthly average Oslo 2019?
163650/12



# w_total - laste inn Excel-w ------------------------------------------



# Det er to skjemaer med en betydelig mengde w: 0 og 3

w0 <- as_tibble(
  read_excel("Winnies_sett/reise0_081121.xlsx")
)

w1 <- as_tibble(
  read_excel("Winnies_sett/reise01_041121.xlsx")
)

w2 <- as_tibble(
  read_excel("Winnies_sett/reise02_060521.xlsx")
)

w3 <- as_tibble(
  read_excel("Winnies_sett/reise03_060521.xlsx")
)

w4 <- as_tibble(
  read_excel("Winnies_sett/reise04_080622.xlsx")
)

w_total0 <- bind_rows(w0, w2, w3, w1, w4) 
w_total <- w_total0

# w2 og w3 spør respondentene bedre om de har opplevd endring i reisevaner under pandemien.
# Istedetfor: hvis du har opplevd endringer i reisevaner, vil du utdype?
# så har skjema 2 og 3 --> 1) oppleved endring (ja/nei), 2) (hvis ja) hvilke endringer, utdyp.





# w_total - cleaning ------------------------------------------------------



# jeg subsetter disse kolonnene som sier noe om hvordan de fikk høre om undersøkelsen
vite <- w_total0 %>% 
  select(contains("du vite"))



# Det er tilfelle av to ulike alternativer for rundtur. Jeg gjør om den ene til den andre.
# Dette alternativet skal nå være i samsvar med wsett fra juni/juli.
w_total[w_total == "Tur (rundtur i nærområdet uten destinasjon)"] <- "Tur (rundtur i nærområdet)"
w_total[w_total == "Nei, skulle ikke hjem"] <- "Nei, jeg skulle ikke hjem"
w_total[w_total == "Nei, hadde flere ærender"] <- "Nei, jeg hadde flere ærender"






# Her gjør jeg om selv-innfylte formål om til de formålskategoriene de hører til
# først: overblikk over hva folk fylte inn for "annet formål".

w_total %>% 
  select(contains("annet formål&")) %>% 
  unite(., alt, na.rm = T) %>% 
  filter(alt != "") 

# subsetter alle kolonnene hvor folk har selvinnfylt. Det er bare 13 av dem
annetformål <- w_total %>% 
  select(contains("annet formål&"))

# her kan man se antall svar per selvinnfylte-spørsmål
colSums(!is.na(annetformål))

# henter kolonneplass til alle selvinnfylte-spørsmål
ind_annetformål <- match(names(annetformål), names(w_total))


nyeformål <- w_total %>% 
  select(ind_annetformål - 1) %>% # henter kolonner for formål (kun de med etterfølgende selvinnfyllende spørsmål)
  stack(.) %>%                    # stacker kolonnene til én kolonne
  rename(hovedformål = values) %>%  # fra stack() blir den ene kolonnene automatisk kalt "values" som vi da endrer på
  cbind(stack(annetformål)[1]) %>% # binder denne kolonnene med stackede selvinnfylte kolonner
  rename(annetformål = values) %>% 
  mutate(hovedformål = case_when(  # vi endrer på hovedformål basert på funn i den selvinnfylte kolonnen
    str_detect(tolower(annetformål), "måke|fjøs|dugnad|fritid|tren|sport|svømme|båt|øve|katt|forening|biblio|frivillig") 
    ~ "Tur (med destinasjon, f.eks trening, rekreasjon, dra til marka)",
    str_detect(tolower(annetformål), "noen") 
    ~ "Hente/levere person (f.eks. barn)",
    str_detect(tolower(annetformål), "milk|kjøp")
    ~ "Butikk, innkjøp",
    str_detect(tolower(annetformål), "gikk")
    ~ "Tur (rundtur i nærområdet)",
    str_detect(tolower(annetformål), "befaring|praksis")
    ~ "Tjenestereise/reise i arbeid",
    TRUE ~ hovedformål
  )) %>% 
  select(1:2) %>% # velger å beholde den ny-endrede kolonnen hovedformål + ind
  unstack()

w_total[ind_annetformål - 1] <- nyeformål






# endrer navn på de mest brukte kolonnene + samt lager nye kolonner: alder, alderskategori
# Gjør om formålet Hjem --> NA, men KUN om de har svart på etterfølgende spørsmål at de dro hjem.
# Dette gjør jeg for at hjemturen ikke telles dobbelt. 
# (Det ville ikke være dobbeltelling for alle andre delturer uten "Hjem" som formål. 
# f.eks. deltur1.2 med formål "..Trening..", og de svarer: dro du hjem? == Ja. 
# Denne kombinasjonen telles som to turer, en treningstur og en hjemtur 
# som vi til slutt endrer formål på til "trening"

# lager en ny funksjon som er motsatt av %in%
'%!in%' <- function(x,y)!('%in%'(x,y))




# w_total <- w_total %>% 
#   filter(NR %!in%  c(10014004, 8327614, 10290734, 10279204))
# too big family. due to travel time = 2400 minutes = 40 hours.
#  plane ride 30 min, ferry time 2 min



w_total <- w_total %>% 
  select(-contains("vite")) %>% 
  rename(kollektiv = `Bor du i et bokollektiv?`,
         kjønn = `Hva er ditt kjønn?`,
         postnummer = `Hva er postnummeret for ditt bosted?`,
         yearborn = `Hvilket år er du født?`,
         dato = `Hvilken dato var det i går?`,
         start = `Hvor startet din dag i går?`,
         `4.2 Hvor lang tid tok reisen hjem?` = `4.2 Hvor lang tid tok reisen dit hjem?`,
         yrke = `Hva regner du som din yrkesstatus eller hovedgjøremål akkurat nå?`,
         fastoppmøte = `Har du til vanlig fast oppmøtested på jobben?`,
         hjemmekontor = `Hvordan er din arbeidssituasjon nå, etter at koronatiltakene trådte i kraft?`,
         arbeidstid = `Hvilken kategori beskriver best din arbeidstid nå?`
  ) %>% 
  mutate(postnummer = as.integer(postnummer)) %>% 
  mutate(`1.1 Hva skulle du på ditt første stopp?` = case_when(
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Besøk hos venner/familie" ~ "Besøke venner/familie",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Jobb" ~ "Jobb",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Hytta" ~ "Hytta",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Midlertidig overnattingssted" ~ "Midlertidig overnattingssted",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Tjenestereise/reise i arbeid" ~ "Tjenestereise/reise i arbeid",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Tur (uten noe bestemt mål)" ~ "Tur (rundtur i nærområdet)",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Skole/studiested" ~ "Skole/studiested",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Annen rekreasjon, trening" ~ "Tur (med destinasjon, f.eks trening, rekreasjon, dra til marka)",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Helsetjeneste" ~ "Helsetjeneste",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Butikk, innkjøp" ~ "Butikk, innkjøp",
    `1.1 Hva skulle du på ditt første stopp?` == "Hjem" & 
      start == "Hjemme" ~ NA_character_,
    T ~ `1.1 Hva skulle du på ditt første stopp?`
  )) %>% 
  rename(`1 Når kom du hjem/til siste sted du skulle på turen?` = `1 Når kom du hjem?`,
         annerledes_0 = `Ville du i det daglige reist annerledes om det ikke var en pågående pandemi? Hvis ja, hva ville vært annerledes?`,
         annerledes_janei = `Ville du i det daglige reist annerledes om det ikke var en pågående pandemi?`,
         annerledes_hvisja = `Du svarte ja. På hvilken måte ville hverdagen vært annerledes?`,
  ) %>% 
  mutate(alder = (2020 - as.numeric(yearborn))) %>% 
  mutate(alderskategori = case_when(alder >= 15 & alder <= 17 ~ '15 - 17',
                                    alder >= 18 & alder <= 24 ~ '18 - 24',
                                    alder >= 25 & alder <= 34 ~ '25 - 34',
                                    alder >= 35 & alder <= 44 ~ '35 - 44',
                                    alder >= 45 & alder <= 54 ~ '45 - 54',
                                    alder >= 55 & alder <= 66 ~ '55 - 66',
                                    alder >= 67 & alder <= 74 ~ '67 - 74',
                                    alder >= 75 ~ '75 +',
                                    T ~ NA_character_
  )) %>% 
  mutate_at(vars(matches("\\d år")), parse_number) %>% 
  mutate(
    
    `1.2 Hva skulle du på det andre stoppet på turen?` = case_when(
      `1.2 Hva skulle du på det andre stoppet på turen?` %in% "Hjem" &
        w_total$`1.2 Dro du rett hjem etter du var ferdig der?` %in% "Ja" ~ NA_character_,
      TRUE ~ `1.2 Hva skulle du på det andre stoppet på turen?`), 
    
    `1.3 Hva skulle du på det tredje stoppet på turen?` = case_when(
      `1.3 Hva skulle du på det tredje stoppet på turen?` == "Hjem" &
        w_total$`1.3 Dro du rett hjem etter du var ferdig der?` == "Ja" ~ NA_character_,
      TRUE ~ `1.3 Hva skulle du på det tredje stoppet på turen?`),
    
    `1.4 Hva skulle du på det fjerde stoppet på turen?` = case_when(
      `1.4 Hva skulle du på det fjerde stoppet på turen?` == "Hjem" &
        w_total$`1.4 Dro du rett hjem etter du var ferdig der?` == "Ja" ~ NA_character_,
      TRUE ~ `1.4 Hva skulle du på det fjerde stoppet på turen?`),
    
    `1.5 Hva skulle du på det femte stoppet på turen?` = case_when(
      `1.5 Hva skulle du på det femte stoppet på turen?` == "Hjem" &
        w_total$`1.5 Dro du rett hjem etter du var ferdig der?` == "Ja" ~ NA_character_,
      TRUE ~ `1.5 Hva skulle du på det femte stoppet på turen?`),
    
    `2.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `2.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        w_total$`2.1 Dro du rett hjem etter du var ferdig der?` == "Ja" ~ NA_character_,
      TRUE ~ `2.1 Hva skulle du på det første stoppet på turen?`),
    
    `3.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `3.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        w_total$`3.1 Dro du rett hjem etter du var ferdig der?` == "Ja" ~ NA_character_,
      TRUE ~ `3.1 Hva skulle du på det første stoppet på turen?`),
    
    `4.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `4.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        w_total$`4.1 Dro du rett hjem etter du var ferdig der?` == "Ja" ~ NA_character_,
      TRUE ~ `4.1 Hva skulle du på det første stoppet på turen?`)
  ) %>%
  # replace_with_na_all(condition = ~.x %in% "Hjem") %>% 
  mutate(kjønn = case_when(kjønn == "Kvinne" ~ "Female",
                           kjønn == "Mann" ~ "Male",
                           TRUE ~ "Them")
  ) %>% 
  filter(NR %!in% c(10014004))



# jeg lager flere nye kolonner: barn, voksne, totmedlem, husholdning  

samb <- w_total %>% 
  select(matches("\\d år"), alder, kollektiv, NR) %>% 
  mutate_all(~replace(., is.na(.), 0)) %>% 
  mutate(barn = rowSums(.[1:4], na.rm = T) + (alder < 18),
         voksne = rowSums(.[5:8], na.rm = T) + (alder >= 18),
         totmedlem = barn + voksne,
         husholdning = case_when(
           kollektiv == "Ja" ~ "Several adults",
           totmedlem == 1 | is.na(totmedlem) ~ "Single w/o children",
           voksne == 1 ~ "Single w/ children 0-17 y/o",
           barn == 0 & voksne == 2 ~ "Couple w/o children",
           barn != 0 ~ "Couple w/ children 0-17 y/o",
           TRUE ~ "Several adults")
  ) %>% 
  mutate(husholdning = fct_relevel(husholdning, c("Single w/o children", "Single w/ children 0-17 y/o",
                                                  "Couple w/o children", "Couple w/ children 0-17 y/o",
                                                  "Several adults"
                                                  
  ))) %>% 
  select(barn, voksne, totmedlem, husholdning, NR)

# legger til disse husholdningskolonnene i w_total.
w_total <- w_total %>% 
  inner_join(samb, by = "NR")






# assigner nye verdier til noen av de som har svart "annet" om type jobb de har.
w_total <- w_total %>% 
  select(everything(), arbeidsplass = contains("arbeidsplass")) %>% 
  mutate(arbeidsplass = case_when(
    str_detect(tolower(arbeidsplass2),"vid|under|admin|univ|vg|råd|it|politiker|media|komm|fors|bibl"
    )         ~ "Kontor (inkl. øvrig undervisning eller forskning)",
    #is.na(arbeidsplass1) ~  NA_character_,
    TRUE                 ~ arbeidsplass1
  ) 
  )








# w_total: telle antall turer ------------------------------------------------------------

# sjekke om noen hadde mange flere turer utover de 25 delreise-spørsmålene.
# NB! Samme problem med select() og Expss-greia.


# sjekker hvor mange turer folk hadde utover de vi fikk spurt om. Pleier å gjelde de færreste.
w_total %>% 
  select(endafler_reiser = contains("Hvor mange fler")) %>% 
  transmute(endafler_reiser = as.integer(coalesce(endafler_reiser1,endafler_reiser2,endafler_reiser3,endafler_reiser4,endafler_reiser5))) %>% 
  filter(!is.na(endafler_reiser))


# teller turer: (formål != NA) + (hjemreise-spørsmål == Ja) - (formål == rundtur)
w_total <- w_total %>% 
  mutate(
    antall_reiser= rowSums(!is.na(select(., contains("skulle du")))) 
    + rowSums(select(., contains("ferdig")) == "Ja", na.rm = TRUE)
    - rowSums(select(., contains("skulle du")) == "Tur (rundtur i nærområdet)", na.rm = TRUE)
  )



# w_total - hovedreisemiddel  -----------------------------------------------------------

# 800 kolonner, 16 reisemidler per spørsmål gir 16 kolonner.
# Et spørsmål om delreise + et spørsmål om hjemreise = 50 spørsmål
# 800 = 16*50


# henter ut alle reisemiddel-kolonner
dfreise <- w_total %>% 
  select(contains("reisemiddel")) 


# Unite() 16 kolonner om gangen. Her tar vi 16 kolonner om gangen og fusjonerer
# alle verdier sammen. Sykkel  gange bil --> sykkel_gange_bil
# Da skal vi gå fra 800 kolonner til 50

idx <- seq(1, 800, 16)
names <- paste0("x", 1:50)

# merge_reisemiddel <- map(idx, ~ dfreise %>% select(.x:(.x + 15))) %>% 
#   map2(., names, ~ .x %>% unite(!!.y, 1:16, na.rm = T)) %>% 
#   set_names(names) %>% 
#   as_tibble() %>% 
#   set_names(names)

merge_reisemiddel <- map(idx, ~ dfreise %>% select(.x:(.x + 15))) %>% 
  map2(., names, ~ .x %>% unite(!!.y, 1:16, na.rm = T)) %>% 
  map_dfc(., bind_cols) %>% 
  as_tibble()


merge_reisemiddel_w <- merge_reisemiddel %>% 
  select(seq(1,50,2), everything()) %>% 
  setNames(col_names) %>% 
  mutate(NR = w_total$NR)
# basert på en string av reisemidler (om de har svart at har brukt flere reisemidler),
# så leter koden etter reisemidler for å assigne hovedreisemiddel. Vi velger selv hvilke 
# reisemidler som er øverst i "hierarkiet" i "definisjonen" av hovedreisemiddel


col_names <- c(
  paste0("delreise 1.", 1:5),
  paste0("delreise 2.", 1:5),
  paste0("delreise 3.", 1:5),
  paste0("delreise 4.", 1:5),
  paste0("delreise 5.", 1:5),
  paste0("hjemreise 1.", 1:5),
  paste0("hjemreise 2.", 1:5),
  paste0("hjemreise 3.", 1:5),
  paste0("hjemreise 4.", 1:5),
  paste0("hjemreise 5.", 1:5)
)

hovedreisemiddel50_w <- merge_reisemiddel %>%
  # unnest(cols = c(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, 
  #                 x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, 
  #                 x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, 
  #                 x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50)) %>% 
  mutate(across(everything(), tolower)) %>% 
  mutate(across(everything(), ~ case_when(
    str_detect(.x,"mc|tilrette|annet")  ~ "MC, other",  
    str_detect(.x,"fly")  ~ "By plane",
    str_detect(.x,"tog")  ~ "Train",
    str_detect(.x, "ferge") ~ "Ferry",
    str_detect(.x, "buss|trikk|bane|drosje") ~ "Public transportation",
    str_detect(.x, "el-sykkel") ~ "Electrical bike",
    str_detect(.x, "sykkel") ~ "Pedal bike",
    str_detect(.x, "kjørte") ~ "Car, driver",
    str_detect(.x, "passasjer") ~ "Car, passenger",
    str_detect(.x, "sparke") ~ "E-scooter",
    str_detect(.x, "gange") ~ "By foot",
    T ~ NA_character_
  )))  %>% 
  #slice(., 1:nrow(w_total)) %>%   # Må slice, fordi det blir masse ekstra rader, idk, men det funker.
  select(seq(1,50,2), everything()) %>% 
  setNames(col_names)

# ^endrer på rekkefølgen slik at: 25 delreisekolonner, 25 hjemreisekolonner
# Det er for å passe med rekkefølgen til de andre matrisene: formål, reisetid


# w_total - tildele formål for hjemreiser  ------------------------------------------------------

# "skulle du" er kun for delreisene, men hjem-reisene er "rett hjem"
# (fordi, "Hvor skulle du på første stopp", "dro du rett hjem etter du var ferdig der")

# Her får hjemreisen delegert et formål fra forrige delreise. De som telles som 
# hjemreise er der folk har svart "Ja", og ikke "Nei, jeg hadde flere ærender", 
# eller "Nei, jeg skulle ikke hjem"




# henter 25 kolonner med hjemreisespørsmål
retthjem <- w_total %>% 
  select(hjem = contains("rett hjem"))




# En 1/0 matrise hvor folk har svart "Ja" til rett hjem
TF_hjemja <- (retthjem == "Ja")*1   # ganger med 1 for å gjøre T/F til 1/0





# henter 25 formålskolonner for alle delreiser (hjemreisespørsmål spør ikke om formål, siden formålet er hjem uansett)
# formålene hentes ut for å delegere/kopiere disse over til formål for hjemreisene
formaal <- w_total %>% 
  select(delreise = contains("skulle du"))




# Vi sørger for å ikke kopiere hjemreiser ut av delreiser hvor formålet er: Tur (rundtur)
# Vi bør/kan ta høyde for dette siden folk har svart "Ja" på det etterfølgende hjemreisespørsmålet, og 
# vi ønsker da ikke å telle denne ekstra ikke-eksisterende hjemturen.

# Obs! Denne metoden er kun et problem om personen har tatt en rundtur ved en ikke-hjem-destinasjon, og faktisk
# dro hjem etter den turen, for det kan jo være tilfelle.*** Skal vi gå inn i wsettet og sjekke for dette? nja.



# En matrise med 0/2 verdier
TF_rundtur <- (formaal == "Tur (rundtur i nærområdet)")*2


# TRUE/FALSE-total er en matrise. Vi får nå en matrise med tall 0, 1, 2, 3. 
# celler med 0 vil si at de ikke hadde en rundtur og de har ikke svart rett hjem == Ja.(kan være tomme celler eller andre svar)
# Celler med 2 vil si at de hadde en rundtur og har svart at de ikke dro hjem, som er "rett" svaremåte.
# celler med 3 vil si at folk har hatt en rundtur + svart "Ja" til at de dro hjem (ikke deres skyld, men da telles det dobbelt).

# Etter vår antakelse *** skal respondenter med celler m/ verdi 3 få én tur trukket i tellingen.
# MEN celler med verdi 2 blir feiltaktig trukket i samme slengen.

TF_total <- as.matrix(TF_hjemja) + as.matrix(TF_rundtur) %>% 
  as.data.frame(.)

# for verdi 2: her må vi rette opp i turfrekvensen til respondenter som har hatt rundtur, men IKKE svart "Ja" til hjemspørsmål (vi legger til en tur)
# fordi vår tellekode trekker automatisk bort en tur om de har hatt en rundtur pga antakelsen*** om at denne turen telles to ganger (hvor celleverdi = 3).


# kopierer matrise, slik at vi kan gjøre endringer / jobbe med den
reiser_ekstra <- TF_total

# matrisen får verdier 2 og NA.
reiser_ekstra[reiser_ekstra != 2] <- NA   # setter lik NA

# summerer forekomster av tallet 2 over kolonnene for å få totalt antall delreiser som må rettes opp
reiser_ekstra <- reiser_ekstra %>% 
  transmute(rundtur = rowSums(!is.na(.)))

# legger til de "opprettende" antall reisene i kolonnene for antallet reiser
w_total <- w_total %>% 
  mutate(antall_reiser= antall_reiser+ reiser_ekstra$rundtur)


# Nå skal vi kopiere delreise formål over til hjemreisene.
# Vi lager da en 1/0 matrise for hjemreiser = JA, og hvor rundturer fjernes.

TF_total[TF_total == 3 | TF_total == 2] <- 0 # ikke sett = NA, for NA filtrerer ikke som F/0 gjør.

# at turene hjem får formål fra forrige tur sitt formål.
nyttformaal <- formaal %>% 
  replace(., !TF_total, NA)

# 25 delreiser + 25 hjemreiser
formaal_50_w_total <- cbind(formaal, nyttformaal) %>% 
  setNames(col_names)


# sjekke om dette formålet er borte
colSums(formaal == "Hjem", na.rm = T)





# w_total - tid50 -------------------------




tid50_w_total <- w_total %>% 
  select(reisetid = contains("tid tok")) %>% 
  select(seq(1,50,2), everything()) %>% 
  setNames(col_names)





# w_total - fikse på hjemmekontorkolonne -------------------------

reisemiddel <- w_total %>% 
  select(contains("reisemiddel")) %>% 
  unite(reisemiddel, remove = T, na.rm = T)


w_total<- w_total %>% 
  mutate(annerledes_janei = case_when(
    !is.na(annerledes_janei) ~ annerledes_janei,
    str_detect(tolower(annerledes_0), "ja|blitt lite|kanskje|rush|shop") ~ "Ja",
    str_detect(tolower(annerledes_0), "nei|nop|mri|lite|ingen forskjell|måte.|ikkje|utendørs") ~ "Nei",
    !is.na(annerledes_0) ~ "Ja",
    TRUE ~ "Nei"
  )) %>%   
  cbind(reisemiddel) %>% 
  mutate(annerledes_hvisja = case_when(
    !is.na(annerledes_hvisja) ~ annerledes_hvisja,
    annerledes_janei == "Ja" & !is.na(annerledes_0) ~ annerledes_0,
    TRUE ~ NA_character_
  )) %>%
  mutate(hjemmekontor = case_when(
    !is.na(hjemmekontor) ~ hjemmekontor,
    str_detect(yrke, "Yrkesaktiv|Annet") & str_detect(tolower(annerledes_hvisja), "reise til jobb|på jobb|t til jobb|hjemmeko|kontor|teams|utgår") 
    ~ "Arbeider på hjemmekontor",
    str_detect(yrke, "Yrkesaktiv|Annet") & str_detect(tolower(annerledes_0), NA_character_) 
    ~  NA_character_,              # kan ikke si "Arbeider som før"
    str_detect(yrke, "Yrkesaktiv|Annet")
    ~ NA_character_,
    TRUE ~ NA_character_
  )) %>% 
  
  mutate(mindrekollektiv = case_when(
    str_detect(tolower(annerledes_hvisja), "kollektiv|trikk|buss") ~ T,
    str_detect(tolower(annerledes_hvisja), "bussvan") ~ NA,
    TRUE ~ NA
  )) %>% 
  mutate(annettidspunkt = case_when(
    str_detect(tolower(annerledes_hvisja), "døgn|rush|tidspunkter|få som|t tidligere|time") ~ T,
    TRUE ~ NA
  )) %>% 
  mutate(mer_bil = case_when(
    str_detect(tolower(annerledes_hvisja), "bil|privatbil|kjører privat") ~ T,
    mindrekollektiv == T & str_detect(tolower(reisemiddel), "bil") ~ T,
    TRUE ~ NA
  )) %>% 
  mutate(mer_sykkelgange = case_when(
    mindrekollektiv == T & str_detect(tolower(reisemiddel), "sykke") ~ T,
    str_detect(tolower(annerledes_hvisja), "går m|går l|fots|gått mindre|å gå|bare gå") ~ T,
    str_detect(tolower(annerledes_hvisja), "sykkel|sykle") ~ T,
    TRUE ~ NA
  )) %>% 
  select(-reisemiddel) %>% 
  add_column(anekdote = NA) 














# juni ---------------------------------------------------------------


juni <- read_excel("Ellens_sett/ellenjuni.xlsx")



juni <- juni %>% 
  select(-contains("passord"))


juni[juni == "Tur (rundtur i nærområdet uten destinasjon)"] <- "Tur (rundtur i nærområdet)"
juni[juni == "Nei, skulle ikke hjem"] <- "Nei, jeg skulle ikke hjem"
juni[juni == "Nei, hadde flere ærender"] <- "Nei, jeg hadde flere ærender"



# lager en ny funksjon som er motsatt av %in%
'%!in%' <- function(x,y)!('%in%'(x,y))

juni <- juni %>% 
  # filter(NR %!in% c(7295125, 7296206, 7347499)
  # ) %>% 
  filter(NR %!in% c(8339018, 8344942, 8356014, 8366263, 8383158, 8440095, 	
                    8442881, 10014004, 8327614)) %>%
  rename(kjønn = `Hva er ditt kjønn?`,
         postnummer = `Hva er postnummeret for ditt bosted?`,
         yearborn = `Hvilket år er du født?`,
         dato = `Hvilken dato var det i går?`,
         start = `Hvor startet din dag i går?`,
         yrke = `Hva regner du som din yrkesstatus eller hovedgjøremål?`,
         arbeidsplass = `Hvilken kategori beskriver best din arbeidsplass?`,
         fastoppmøte = `Har du til vanlig fast oppmøtested på jobben?`,
         hjemmekontor = `Hvordan er din arbeidssituasjon nå, etter at koronatiltakene trådte i kraft?`,
         arbeidstid = `Hvilken kategori beskriver best din arbeidstid?`
  ) %>% 
  mutate(postnummer = as.integer(postnummer)) %>% 
  mutate(alder = (2020 - as.numeric(yearborn))) %>% 
  mutate(`1.1 Hva skulle du på det første stoppet på turen?` = case_when( 
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Besøk hos venner/familie" ~ "Besøke venner/familie",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Jobb" ~ "Jobb",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Hytta" ~ "Hytta",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Midlertidig overnattingssted" ~ "Midlertidig overnattingssted",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Tjenestereise/reise i arbeid" ~ "Tjenestereise/reise i arbeid",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Tur (uten noe bestemt mål)" ~ "Tur (rundtur i nærområdet)",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Skole/studiested" ~ "Skole/studiested",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Annen rekreasjon, trening" ~ "Tur (med destinasjon, f.eks trening, rekreasjon, dra til marka)",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Helsetjeneste" ~ "Helsetjeneste",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Butikk, innkjøp" ~ "Butikk, innkjøp",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Hjemme" & NR == 7299656 ~ "Tur (rundtur i nærområdet)",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Hjemme" ~ NA_character_,
    T ~ `1.1 Hva skulle du på det første stoppet på turen?`
  )) %>% 
  rename(`1.1 Når på dagen startet din første tur i går?` = `1.1 Når på dagen startet din første reise i går?`,
         `2.1 Når på dagen startet din andre tur i går?` = `2.1 Når på dagen startet denne turen?`,
         `3.1 Når på dagen startet din tredje tur i går?` = `3.1 Når på dagen startet denne turen?`,
         `4.1 Når på dagen startet din fjerde tur i går?` = `4.1 Når på dagen startet denne turen?`,
         `5.1 Når på dagen startet din femte tur i går?` = `5.1 Når på dagen startet denne turen?`,
  ) %>% 
  mutate(alderskategori = case_when(alder >= 15 & alder <= 17 ~ '15 - 17',
                                    alder >= 18 & alder <= 24 ~ '18 - 24',
                                    alder >= 25 & alder <= 34 ~ '25 - 34',
                                    alder >= 35 & alder <= 44 ~ '35 - 44',
                                    alder >= 45 & alder <= 54 ~ '45 - 54',
                                    alder >= 55 & alder <= 66 ~ '55 - 66',
                                    alder >= 67 & alder <= 74 ~ '67 - 74',
                                    alder >= 75 ~ '75 +',
                                    T ~ NA_character_
                                    
  )) %>% 
  mutate_at(vars(matches("\\d år")), parse_number) %>%  # gjør om fra ch til num
  # replace_with_na_all(condition = ~.x %in% "Hjem") %>% 
  mutate(kjønn = case_when(kjønn == "Kvinne" ~ "Female",
                           kjønn == "Mann" ~ "Male",
                           TRUE ~ "Them")
  )


juni <- juni %>% 
  mutate_if(is.logical, as.character) %>% 
  mutate(
    `1.2 Hva skulle du på det andre stoppet på turen?` = case_when(
      `1.2 Hva skulle du på det andre stoppet på turen?` == "Hjem" &
        juni$`1.2 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `1.2 Hva skulle du på det andre stoppet på turen?`), 
    
    `1.3 Hva skulle du på det tredje stoppet på turen?` = case_when(
      `1.3 Hva skulle du på det tredje stoppet på turen?` == "Hjem" &
        juni$`1.3 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `1.3 Hva skulle du på det tredje stoppet på turen?`),
    
    `1.4 Hva skulle du på det fjerde stoppet på turen?` = case_when(
      `1.4 Hva skulle du på det fjerde stoppet på turen?` == "Hjem" &
        juni$`1.4 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `1.4 Hva skulle du på det fjerde stoppet på turen?`),
    
    `1.5 Hva skulle du på det femte stoppet på turen?` = case_when(
      `1.5 Hva skulle du på det femte stoppet på turen?` == "Hjem" &
        juni$`1.5 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `1.5 Hva skulle du på det femte stoppet på turen?`),
    
    `2.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `2.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        juni$`2.1 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `2.1 Hva skulle du på det første stoppet på turen?`),
    
    `2.2 Hva skulle du på det andre stoppet på turen?` = case_when(
      `2.2 Hva skulle du på det andre stoppet på turen?` == "Hjem" &
        juni$`2.2 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `2.2 Hva skulle du på det andre stoppet på turen?`),
    
    `2.3 Hva skulle du på det tredje stoppet på turen?` = case_when(
      `2.3 Hva skulle du på det tredje stoppet på turen?` == "Hjem" &
        juni$`2.3 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `2.3 Hva skulle du på det tredje stoppet på turen?`),
    
    `3.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `3.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        juni$`3.1 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `3.1 Hva skulle du på det første stoppet på turen?`),
    
    `4.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `4.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        juni$`4.1 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `4.1 Hva skulle du på det første stoppet på turen?`),
    
    `5.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `5.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        juni$`5.1 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `5.1 Hva skulle du på det første stoppet på turen?`)
  )

samb <- juni %>% 
  select(matches("\\d år"), alder, NR) %>% 
  mutate_all(~replace(., is.na(.), 0)) %>% 
  mutate(barn = rowSums(.[1:4], na.rm = T) + (alder < 18),
         voksne = rowSums(.[5:8], na.rm = T) + (alder >= 18),
         totmedlem = barn + voksne,
         husholdning = case_when(
           totmedlem == 1 | is.na(totmedlem) ~ "Single w/o children",
           voksne == 1 & barn != 0 ~ "Single w/ children 0-17 y/o",
           voksne == 2 & barn == 0  ~ "Couple w/o children",
           voksne != 0 & barn != 0 ~ "Couple w/ children 0-17 y/o",
           TRUE ~ "Several adults"
         )) %>%   
  select(barn, voksne, totmedlem, husholdning, NR)

juni <- juni %>% 
  inner_join(samb, by = "NR")



# juni - Antall turer ------------------------------------------------------------


juni %>% 
  select(endafler_reiser = contains("Hvor mange flere")) %>% 
  transmute(endafler_reiser = as.integer(coalesce(endafler_reiser1,endafler_reiser2,endafler_reiser3,endafler_reiser4,endafler_reiser5))) %>% 
  filter(!is.na(endafler_reiser))


# men vi kan kun trekke fra rundturer i tellingen om de svarte at de dro hjem etterpå. 
# Hvis ikke svarte at de dro hjem, så har vi ikke dobbeltellingsfeil, og trenger ikke trekke fra 
# rundturen i tellingen.

juni <- juni %>% 
  mutate(antall_reiser =
           rowSums(!is.na(select(., contains("skulle du")))) 
         + rowSums(select(., contains("rett hjem")) == "Ja", na.rm = TRUE)
         - rowSums(select(., contains("skulle du")) == "Tur (rundtur i nærområdet)", na.rm = TRUE)
  )




# juni - duplikere reisetid for hjemreiser ---------------------------



retthjem_juni <- juni %>% 
  select(hjem = contains("rett hjem"))

TF_tid <- retthjem_juni == "Ja"
tid <- juni %>% 
  select(contains("tid tok")) %>% 
  na_if(.,0) 


# lager dummynavn for tid_hjem matrisen, fordi den egentlig har samme navn som tid_juni.
# Når jeg forsøker sette sammen de to matrisene kan det ikke være kolonner med likt navn.

# tid50_w_total <- w_total %>% 
#   select(reisetid = contains("tid tok")) %>% 
#   select(seq(1,50,2), everything()) %>% 
#   setNames(col_names)

tid_hjem <- replace(tid, !TF_tid, NA) 



# setter sammen de to tidsmatrisene (delreise, hjemreise)
tid50_juni <- cbind(tid, tid_hjem) %>% 
  setNames(col_names)



# juni - duplikere reisemiddel for hjemreiser -----------------------------------------------------------


dfreise_juni <- juni %>% 
  select(contains("reisemiddel")) 


# Unite() 13 kolonner om gangen
idx_juni <- seq(1, 325, 13)
names_juni <- paste0("x", 1:25)


merge_reisemiddel_juni <- map(idx_juni, ~ dfreise_juni %>% select(.x:(.x + 12))) %>% 
  map2(., names_juni, ~ .x %>% unite(!!.y, 1:13, na.rm = T)) %>% 
  map_dfc(., bind_cols) %>% 
  as_tibble()


hovedreisemiddel25_juni <- merge_reisemiddel_juni %>%
  mutate(across(everything(), tolower)) %>% 
  mutate(across(everything(), ~ case_when(
    str_detect(.x,"mc|tilrette|annet")  ~ "MC, other",  
    str_detect(.x,"fly")  ~ "By plane",
    str_detect(.x,"tog")  ~ "Train",
    str_detect(.x, "ferge") ~ "Ferry",
    str_detect(.x, "buss|trikk|bane|drosje") ~ "Public transportation",
    str_detect(.x, "el-sykkel") ~ "Electrical bike",
    str_detect(.x, "sykkel") ~ "Pedal bike",
    str_detect(.x, "kjørte") ~ "Car, driver",
    str_detect(.x, "passasjer") ~ "Car, passenger",
    str_detect(.x, "sparke") ~ "E-scooter",
    str_detect(.x, "gange") ~ "By foot",
    T ~ NA_character_
  )))

TF_reisemiddel <- retthjem_juni == "Ja" 

hovedreisemiddel_juni_hjem <- replace(hovedreisemiddel25_juni, !TF_reisemiddel, NA)

# Lager 50-kolonnersmatrise = 25 delreise + 25 hjemreise
hovedreisemiddel50_juni <- cbind(hovedreisemiddel25_juni, hovedreisemiddel_juni_hjem) %>% 
  setNames(col_names)


# merge_reisemiddel_juni <- merge_reisemiddel
blop <- replace(merge_reisemiddel_juni, !TF_reisemiddel, NA)
merge_reisemiddel_juni <- cbind(merge_reisemiddel_juni, blop) %>% 
  setNames(col_names) %>% 
  cbind(NR = juni$NR)


# juni: tildele formål til hjemreiser  ------------------------------------------------------

# "skulle du" er kun for delreisene, men hjem-reisene er "rett hjem"
# hjemreisen har sitt formål fra forrige delreise

# retthjem matrise fra tidligere

TF_hjemja <- (retthjem == "Ja")*1

formaal <- juni %>% 
  select(delreise = contains("skulle du"))

# sørger for å ikke kopiere hjemreiser til turer med formål: rundtur
TF_rundtur <- (formaal == "Tur (rundtur i nærområdet)")*2


TF_total <- as.matrix(TF_hjemja) + as.matrix(TF_rundtur) %>% 
  as.data.frame(.)
reiser_ekstra <- TF_total

reiser_ekstra[reiser_ekstra != 2] <- NA
reiser_ekstra <- reiser_ekstra %>% 
  transmute(rundtur = rowSums(!is.na(.)))

juni <- juni %>% 
  mutate(antall_reiser= antall_reiser+ reiser_ekstra$rundtur)

TF_total[TF_total == 3 | TF_total == 2] <- 0 # ikke sett = NA, for NA filtrerer ikke som F/0 gjør.


nyttformaal <- formaal %>% 
  replace(., !TF_total, NA)

# 50 kolonner
formaal_50_juni <- cbind(formaal, nyttformaal) %>% 
  setNames(col_names)


colSums(formaal == "Hjem", na.rm = T)




# juli ---------------------------------------------------------------


juli <- read_excel("Ellens_sett/ellenjuli.xlsx")


juli <- juli %>% 
  select(-contains("passord"))




juli[juli == "Tur (rundtur i nærområdet uten destinasjon)"] <- "Tur (rundtur i nærområdet)"
juli[juli == "Nei, skulle ikke hjem"] <- "Nei, jeg skulle ikke hjem"
juli[juli == "Nei, hadde flere ærender"] <- "Nei, jeg hadde flere ærender"






'%!in%' <- function(x,y)!('%in%'(x,y))


juli <- juli %>% 
  slice(154:nrow(juli)) %>%
  filter(NR %!in% c(8339018, 8344942, 8356014, 8366263, 8383158, 8440095, 	
                    8442881, 10014004, 8327614)) %>% # respondenter hvor transportmiddel mangler
  rename(kjønn = `Hva er ditt kjønn?`,
         postnummer = `Hva er postnummeret for ditt bosted?`,
         yearborn = `Hvilket år er du født?`,
         dato = `Hvilken dato var det i går?`,
         start = `Hvor startet din dag i går?`,
         yrke = `Hva regner du som din yrkesstatus eller hovedgjøremål?`,
         arbeidsplass = `Hvilken kategori beskriver best din arbeidsplass?`,
         fastoppmøte = `Har du til vanlig fast oppmøtested på jobben?`,
         hjemmekontor = `Hvordan er din arbeidssituasjon nå, etter at koronatiltakene trådte i kraft?`,
         arbeidstid = `Hvilken kategori beskriver best din arbeidstid?`
  ) %>% 
  mutate(postnummer = as.integer(postnummer)) %>% 
  mutate(alder = (2020 - as.numeric(yearborn))) %>% 
  mutate(`1.1 Hva skulle du på det første stoppet på turen?` = case_when(
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Besøk hos venner/familie" ~ "Besøke venner/familie",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Jobb" ~ "Jobb",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Hytta" ~ "Hytta",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Midlertidig overnattingssted" ~ "Midlertidig overnattingssted",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Tjenestereise/reise i arbeid" ~ "Tjenestereise/reise i arbeid",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Tur (uten noe bestemt mål)" ~ "Tur (rundtur i nærområdet)",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Skole/studiested" ~ "Skole/studiested",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Annen rekreasjon, trening" ~ "Tur (med destinasjon, f.eks trening, rekreasjon, dra til marka)",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Helsetjeneste" ~ "Helsetjeneste",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Butikk, innkjøp" ~ "Butikk, innkjøp",
    `1.1 Hva skulle du på det første stoppet på turen?` == "Hjem" & 
      start == "Hjemme" ~ NA_character_,
    T ~ `1.1 Hva skulle du på det første stoppet på turen?`
  )) %>% 
  mutate(alderskategori = case_when(alder >= 15 & alder <= 17 ~ '15 - 17',
                                    alder >= 18 & alder <= 24 ~ '18 - 24',
                                    alder >= 25 & alder <= 34 ~ '25 - 34',
                                    alder >= 35 & alder <= 44 ~ '35 - 44',
                                    alder >= 45 & alder <= 54 ~ '45 - 54',
                                    alder >= 55 & alder <= 66 ~ '55 - 66',
                                    alder >= 67 & alder <= 74 ~ '67 - 74',
                                    alder >= 75 ~ '75 +',
                                    T ~ NA_character_
  )) %>% 
  mutate_at(vars(matches("\\d år")), parse_number)

juli <- juli %>% 
  mutate(
    `1.2 Hva skulle du på det andre stoppet på turen?` = case_when(
      `1.2 Hva skulle du på det andre stoppet på turen?` == "Hjem" &
        juli$`1.2 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `1.2 Hva skulle du på det andre stoppet på turen?`), 
    
    `1.3 Hva skulle du på det tredje stoppet på turen?` = case_when(
      `1.3 Hva skulle du på det tredje stoppet på turen?` == "Hjem" &
        juli$`1.3 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `1.3 Hva skulle du på det tredje stoppet på turen?`),
    
    `1.4 Hva skulle du på det fjerde stoppet på turen?` = case_when(
      `1.4 Hva skulle du på det fjerde stoppet på turen?` == "Hjem" &
        juli$`1.4 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `1.4 Hva skulle du på det fjerde stoppet på turen?`),
    
    `1.5 Hva skulle du på det femte stoppet på turen?` = case_when(
      `1.5 Hva skulle du på det femte stoppet på turen?` == "Hjem" &
        juli$`1.5 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `1.5 Hva skulle du på det femte stoppet på turen?`),
    
    `2.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `2.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        juli$`2.1 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `2.1 Hva skulle du på det første stoppet på turen?`),
    
    `2.2 Hva skulle du på det andre stoppet på turen?` = case_when(
      `2.2 Hva skulle du på det andre stoppet på turen?` == "Hjem" &
        juli$`2.2 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `2.2 Hva skulle du på det andre stoppet på turen?`),
    
    `2.3 Hva skulle du på det tredje stoppet på turen?` = case_when(
      `2.3 Hva skulle du på det tredje stoppet på turen?` == "Hjem" &
        juli$`2.3 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `2.3 Hva skulle du på det tredje stoppet på turen?`),
    
    `3.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `3.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        juli$`3.1 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `3.1 Hva skulle du på det første stoppet på turen?`),
    
    `4.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `4.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        juli$`4.1 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `4.1 Hva skulle du på det første stoppet på turen?`),
    
    `5.1 Hva skulle du på det første stoppet på turen?` = case_when(
      `5.1 Hva skulle du på det første stoppet på turen?` == "Hjem" &
        juli$`5.1 Dro du rett hjem etterpå?` == "Ja" ~ NA_character_,
      TRUE ~ `5.1 Hva skulle du på det første stoppet på turen?`)
    
  ) %>%
  # replace_with_na_all(condition = ~.x %in% "Hjem") %>% 
  mutate(kjønn = case_when(kjønn == "Kvinne" ~ "Female",
                           kjønn == "Mann" ~ "Male",
                           TRUE ~ "Them")
  )

samb <- juli %>% 
  select(matches("\\d år"), alder, NR) %>% 
  mutate_all(~replace(., is.na(.), 0)) %>% 
  mutate(barn = rowSums(.[1:4], na.rm = T) + (alder < 18),
         voksne = rowSums(.[5:8], na.rm = T) + (alder >= 18),
         totmedlem = barn + voksne,
         husholdning = case_when(
           totmedlem == 1 | is.na(totmedlem) ~ "Single w/o children",
           voksne == 1 & barn != 0 ~ "Single w/ children 0-17 y/o",
           voksne == 2 & barn == 0  ~ "Couple w/o children",
           voksne != 0 & barn != 0 ~ "Couple w/ children 0-17 y/o",
           TRUE ~ "Several adults")
  ) %>% 
  select(barn, voksne, totmedlem, husholdning, NR)

juli <- juli %>% 
  inner_join(samb, by = "NR")


# juli - Antall turer ------------------------------------------------------------


# Samme problem med select() og Expss-greia.
juli %>% 
  select(endafler_reiser = contains("Hvor mange flere")) %>% 
  transmute(endafler_reiser = as.integer(coalesce(endafler_reiser1,endafler_reiser2,endafler_reiser3,endafler_reiser4,endafler_reiser5))) %>% 
  filter(!is.na(endafler_reiser))


juli <- juli %>% 
  mutate(
    antall_reiser= rowSums(!is.na(select(., contains("skulle du")))) 
    + rowSums(select(., contains("rett hjem")) == "Ja", na.rm = TRUE)
    - rowSums(select(., contains("skulle du")) == "Tur (rundtur i nærområdet)", na.rm = TRUE)
  )



# juli - duplisere reisetid for hjemreiser  -----------------------------------------



retthjem_juli <- juli %>% 
  select(ferdig = contains("rett hjem"))

TF_tid <-  retthjem_juli == "Ja"
tid <- juli %>% 
  select(contains("tid tok"))


tid_hjem <- replace(tid, !TF_tid, NA) 

# stemmer ikke! Her må vi legge til hjemtur også.
tid50_juli <- cbind(tid, tid_hjem) %>% 
  set_names(col_names)



# juli - finne hovedreisemiddel samt duplisere dette for hjemreiser  -----------------------------------------------------------



dfreise_juli <- juli %>% 
  select(contains("reisemiddel")) 


# Unite() 13 kolonner om gangen
idx_juli <- seq(1, 400, 16)
names_juli <- paste0("x", 1:25)


merge_reisemiddel_juli <- map(idx_juli, ~ dfreise_juli %>% select(.x:(.x + 15))) %>% 
  map2(., names_juli, ~ .x %>% unite(!!.y, 1:16, na.rm = T)) %>% 
  map_dfc(., bind_cols) %>% 
  as_tibble() %>% 
  set_names(names_juli)


hovedreisemiddel25_juli <- merge_reisemiddel %>%
  # unnest(cols = c(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, 
  #                 x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25)) %>% 
  mutate(across(everything(), tolower)) %>% 
  mutate(across(everything(), ~ case_when(
    str_detect(.x,"mc|tilrette|annet")  ~ "MC, other",  
    str_detect(.x,"fly")  ~ "By plane",
    str_detect(.x,"tog")  ~ "Train",
    str_detect(.x, "ferge") ~ "Ferry",
    str_detect(.x, "buss|trikk|bane|drosje") ~ "Public transportation",
    str_detect(.x, "el-sykkel") ~ "Electrical bike",
    str_detect(.x, "sykkel") ~ "Pedal bike",
    str_detect(.x, "kjørte") ~ "Car, driver",
    str_detect(.x, "passasjer") ~ "Car, passenger",
    str_detect(.x, "sparke") ~ "E-scooter",
    str_detect(.x, "gange") ~ "By foot",
    T ~ NA_character_
  )))

TF_reisemiddel <- retthjem_juli == "Ja"

hovedreisemiddel_juli_hjem <- replace(hovedreisemiddel25_juli, !TF_reisemiddel, NA)

# Lager 50-kolonnersmatrise = 25 delreise + 25 hjemreise
hovedreisemiddel50_juli <- cbind(hovedreisemiddel25_juli, hovedreisemiddel_juli_hjem) %>% 
  setNames(col_names)


blop <- replace(merge_reisemiddel_juli, !TF_reisemiddel, NA)
merge_reisemiddel_juli <- cbind(merge_reisemiddel_juli, blop) %>% 
  setNames(col_names) %>% 
  mutate(NR = juli$NR)



# juli - tildele formål til hjemreiser ------------------------------------------------------

# "skulle du" er kun for delreisene, men hjem-reisene er "rett hjem"
# hjemreisen har sitt formål fra forrige delreise
retthjem <- juli %>% 
  select(hjem = contains("rett hjem"))
TF_hjemja <- (retthjem == "Ja")*1

formaal <- juli %>% 
  select(delreise = contains("skulle du"))

# sørger for å ikke kopiere hjemreiser til turer med formål: rundtur
TF_rundtur <- (formaal == "Tur (rundtur i nærområdet)")*2


TF_total <- as.matrix(TF_hjemja) + as.matrix(TF_rundtur) %>% 
  as.data.frame(.)
reiser_ekstra <- TF_total

reiser_ekstra[reiser_ekstra != 2] <- NA
reiser_ekstra <- reiser_ekstra %>% 
  transmute(rundtur = rowSums(!is.na(.)))

juli <- juli %>% 
  mutate(antall_reiser= antall_reiser+ reiser_ekstra$rundtur)

TF_total[TF_total == 3 | TF_total == 2] <- 0 # ikke sett = NA, for NA filtrerer ikke som F/0 gjør.


nyttformaal <- formaal %>% 
  replace(., !TF_total, NA)

formaal_50_juli <- cbind(formaal, nyttformaal) %>% 
  setNames(col_names)


colSums(formaal_50_juli == "Hjem", na.rm = T)











# ***Binder w_total, juni og juli ----------------------------------







tid50 <- bind_rows(tid50_w_total, tid50_juni, tid50_juli) %>% 
  na_if(.,0) 


# quantile(tid_mean_tot$tottid, probs = seq(0,1,0.05), na.rm = T)
# quantile(tid_mean_tot$meantid, probs = seq(0,1,0.05), na.rm = T)

tidskategori_levels <- c("< 5 min", "5 - 10 min", "10 - 15 min","< 15 min", "15 - 30 min", 
                         "30 - 50 min","30 - 60 min","1 - 2 hours", "> 2 hours", "50 - 90 min",
                           "1.5 - 3 hours","> 3 hours")

mode_levels <- c("Car, driver", "Car, passenger", "Public transportation", "Pedal bike", "Electrical bike", "By foot", "MC, other" )


tid_mean_tot <- tid50 %>% 
  transmute(meantid = rowMeans(type.convert(.), na.rm = T),
            tottid = rowSums(type.convert(.), na.rm = T) 
            ) %>% 
  mutate(mean_tidskategori = case_when(
    meantid < 5 ~ "< 5 min",
    meantid <= 10 ~ "5 - 10 min",
    meantid <= 15 ~ "10 - 15 min",
    meantid <= 30 ~ "15 - 30 min",
    meantid <= 60 ~ "30 - 60 min",
    meantid <= 120 ~ "1 - 2 hours",
    meantid > 120 ~ "> 2 hours",
    TRUE ~ as.character(meantid)
    ), 
    mean_tidskategori = fct_relevel(
  mean_tidskategori, tidskategori_levels
  ), 
  tot_tidskategori = case_when(
    tottid < 15 ~ "< 15 min",
    tottid <= 30 ~ "15 - 30 min",
    tottid <= 50 ~ "30 - 50 min",
    tottid <= 90 ~ "50 - 90 min",
    tottid <= 180 ~ "1.5 - 3 hours",
    tottid > 180 ~ "> 3 hours",
    TRUE ~ as.character(tottid)
  ),
  tot_tidskategori = fct_relevel(
  tot_tidskategori, tidskategori_levels)
  )



tellekategori_levels <- c("No trips","1-2 trips","3-4 trips","5-6 trips", "7+ trips")

# Postnummerregister har kommunenavn og postnummer. Jeg lager kolonne med fylke også.

Postnummerregister  <- read_excel("~/00_PhD_lokal/RVU_corona/Postnummerregister-Excel.xlsx") %>% 
  mutate(postnummer = as.integer(Postnummer)) %>% 
  mutate(fylke = case_when(
    str_detect(Kommunenummer, "^30..") ~ "VIKEN",
    str_detect(Kommunenummer, "^03..") ~ "OSLO",
    str_detect(Kommunenummer, "^11..") ~ "ROGALAND",
    str_detect(Kommunenummer, "^15..") ~ "MØRE OG ROMSDAL",
    str_detect(Kommunenummer, "^18..") ~ "NORDLAND",
    str_detect(Kommunenummer, "^34..") ~ "INNLANDET",
    str_detect(Kommunenummer, "^38..") ~ "VESTFOLD OG TELEMARK",
    str_detect(Kommunenummer, "^42..") ~ "AGDER",
    str_detect(Kommunenummer, "^46..") ~ "VESTLAND",
    str_detect(Kommunenummer, "^50..") ~ "TRØNDELAG",
    str_detect(Kommunenummer, "^54..") ~ "TROMS OG FINNMARK",            
  ))



Sys.setlocale(locale = "English") 

'%!in%' <- function(x,y)!('%in%'(x,y))

personfil_0 <- bind_rows(w_total, juni, juli) %>% 
  cbind(tid_mean_tot) %>% 
  left_join(Postnummerregister %>% select(Kommunenavn, fylke, postnummer), by = "postnummer") %>% 
  select(everything(), dato = contains("dato")) %>% 
  mutate(dato = parse_date(dato, format = "%d.%m.%Y"),
         day = wday(dato, label =T),
         day = fct_relevel(day, levels(.$day)[c(2:7,1)]),
         hverdag = case_when(
           str_detect(day, "S") ~ "Weekend",
           T ~ "Weekday")
  ) %>%   
  mutate(dato = case_when(
    dato < "2020-04-01" | dato > "2021-10-01" ~ lag(dato),  # fikser datoer som er oppgitt feil
    TRUE ~ dato)
  ) %>% 

  mutate(tellekategori = case_when(
    antall_reiser< 1 ~ "No trips",
    antall_reiser< 3 ~ "1-2 trips",
    antall_reiser< 5 ~ "3-4 trips",
    antall_reiser< 7 ~ "5-6 trips",
    antall_reiser> 6 ~ "7+ trips",
  )) %>% 
  mutate(tellekategori = 
           fct_relevel(tellekategori, tellekategori_levels
           )) %>% 
  mutate(reisemiddel = as.character(reisemiddel)) %>% 
  mutate(reisemiddel = case_when(
    str_detect(reisemiddel, "plane|Train|Ferry") ~ "Public transportation",
    T ~ reisemiddel
  )) %>% 

  mutate(month = month(dato, label = T)) %>% 
  mutate(year = year(dato)-2000) %>% 
  unite("monthyear", month:year, sep = "'", remove = T) %>%
  mutate(monthyear = fct_relevel(monthyear, levels = month_levels)
  ) %>% 
  mutate(barn = as.character(barn),
         barn = case_when(
           is.na(barn) ~ "0",
           str_detect(barn, "4|5|6|7|8|9|10|11|12") ~ "4 or more",
           T ~ barn
         )
  ) %>% 
  mutate(hjemmekontor = case_when(
    hjemmekontor == "Arbeider som før" ~ "Go to work as usual",
    hjemmekontor == "Arbeider på hjemmekontor" ~ "Work from home",
    str_detect(hjemmekontor, "før|vet|Kara|Perm") ~ "Other",
    TRUE ~ hjemmekontor
  )) %>% 
  mutate(yrke = case_when(
    str_detect(yrke, "Annet") ~ "Other",
    str_detect(yrke, "deltid") ~ "Part-time",
    str_detect(yrke, "heltid") ~ "Full-time",
    str_detect(yrke, "Studerer") ~ "Student, higher education",
    str_detect(yrke, "Fødsel") ~ "Parental leave",
    str_detect(yrke, "AFP") ~ "Pensioner",
    str_detect(yrke, "på skole") & alder < 20 ~ "Go to school",
    str_detect(yrke, "på skole")  ~ "Student, higher education",
    str_detect(yrke, "Arbeidsledig|omsorgsarbeid") ~ "Care work, unemployment",
    T ~ yrke
  )) %>%   
  mutate(student = case_when(
    yrke == "Student, higher education" ~ "Student",
    TRUE ~ "Not student"
  )) %>% 
  mutate(arbeidstid = case_when(
    str_detect(arbeidstid, "Fast arbeidstid på dagtid") ~ "Standard Business Day",
    # str_detect(arbeidstid, "Fast arbeidstid på natt") ~ "Fixed night schedule",
    str_detect(arbeidstid, "fleksi") ~ "Flextime",
    str_detect(arbeidstid, "Annen ordning|når jeg vil|på natt") ~ "Different schedule",
  # str_detect(arbeidstid, "når jeg vil") ~ "No schedule",
    str_detect(arbeidstid, "turnus") ~ "Shift work, rotating shifts",
    T ~ arbeidstid
    )) %>% 

  mutate(arbeidsplass = case_when(
    str_detect(arbeidsplass, "omsorgsarbeid") ~ "Healthcare",
    str_detect(arbeidsplass, "barnehage") ~ "Education and kindergarten",
    str_detect(arbeidsplass, "vedlik|Nødetat") ~ "Other", 
    str_detect(arbeidsplass, "uteliv|Butikk|Transport") ~ "Restaurant, stores, taxi, goods delivery",
    str_detect(arbeidsplass, "Jordbruk") ~ "Industry, agriculture, craftmanship",
    str_detect(arbeidsplass, "Kontor") ~ "Office job, research, administration",
    str_detect(arbeidsplass, "Annet") ~ "Office job, research, administration",
    str_detect(arbeidsplass, "Ønsker ikke") ~ "Do not wish to declare",
    T ~ arbeidsplass
  ))  %>%  select(NR, dato, arbeidsplass, student, fastoppmøte, hjemmekontor, arbeidstid, yrke, kjønn, alder, 
              alderskategori, barn, voksne, totmedlem, husholdning, Kommunenavn, fylke, day, hverdag, 
              antall_reiser, meantid, tottid, tellekategori, 
              annerledes_0,annerledes_janei, mindrekollektiv, annettidspunkt, mer_bil, mer_sykkelgange, Svartid, monthyear) 
  

# Det er en error-melding for at vi har definert Aug'20, men det er bare å ignorere den. 
# Det kommer bare av at vi ikke har w fra Aug'20



# stacking 50 columns of travel time values.
tid_stack <-  
  as.data.frame(stack(tid50)) %>% 
  select(-ind) %>% 
  unlist() %>% 
  parse_number() %>% 
  as.numeric() %>%
  as_tibble() 



merge_50 <- bind_rows(merge_reisemiddel_w, merge_reisemiddel_juni, merge_reisemiddel_juli) %>% 
  pivot_longer(!NR, names_to = "ind", values_to = "merge_reisemiddel") %>% 
  mutate_at(3:52, ~ as.character()) %>% 
  unite("merge_reisemiddel", 3:52 ,remove = T) %>% 
   View




formaal_50 <- bind_rows(formaal_50_w_total, formaal_50_juni, formaal_50_juli)

formaal_stack <- 
  as.data.frame(stack(formaal_50)) %>% 
  select(-ind) %>% 
  setNames("formål") %>% 
  mutate(formål = case_when(
    str_detect(formål, "rundtur") ~ "Undirected round trips",
    str_detect(formål, "Tur|Underholdning og kultur|Besøke venner/familie|Restaurant|Hytta") ~ "Free time activities",
    str_detect(formål, "Annet") ~ "Other",
    str_detect(formål, "Butikk|Andre|Helse") ~ "Shopping/grocery/service",
    #str_detect(formål,"Hytta") ~ "To/from cabin",
    str_detect(formål,"Midlertidig|Tjenestereise/reise i arbeid") ~ "Business trip / temporary accomodation",
    str_detect(formål, "Hente") ~ "Pick up/drop off trip",          # escort trip?
    formål == "Jobb" ~ "To/from workplace",
    formål == "Skole/studiested" ~ "School/university",
   # formål == "Besøke venner/familie" ~ "Visit friend/family",
    #str_detect(formål, "Restaurant") ~ "Restaurent/cafe",
   # formål == "Underholdning og kultur" ~ "Entertainment and culture",
    #formål == "Helsetjeneste" ~ "Health related services",
    #formål == "Tjenestereise/reise i arbeid" ~ "Duty/business trip",
    TRUE ~ as.character(formål)
  ))



hovedreisemiddel50 <- bind_rows(hovedreisemiddel50_w, hovedreisemiddel50_juni, hovedreisemiddel50_juli)


#prøve å stacke ut NR eller annen ID
m <- cbind(hovedreisemiddel50, personfil_0) 
n <- data.frame(stack(m[1:50]), m[51:ncol(m)])

# lager df_per_reise
reisefil_0 <- cbind(formaal_stack, tid_stack, n) %>% 
  rename(reisemiddel = values, reisetid = value) %>% 
  mutate(key = 1:nrow(formaal_stack))


# Her stjeles(kopieres) forrige formål for å erstatte formål "Hjem".

steal_purpose <- reisefil_0 %>%   # filtrer ut bare turer med formål != NA
  filter(!is.na(formål)) %>% 
  select(NR, formål, key) %>%
  arrange(NR) %>% 
  mutate(steal = case_when(
    formål == "Hjem" ~ lag(formål), # lag() refers to the previous/above row
    TRUE ~ formål)
  )  %>% 
  select(steal, key)

steal_mode <- reisefil_0 %>% 
  filter(!is.na(reisetid)) %>%  
  select(NR, reisetid, reisemiddel, key) %>%
  arrange(NR) %>% 
  mutate(steal2 = case_when(
    !is.na(reisetid) & is.na(reisemiddel) ~ lead(reisemiddel),  # lead() is opposite of lag()
    TRUE ~ reisemiddel)
  )  %>% 
  select(steal2, key)


# erstatter formål "Hjem" med forrige formål.
# henter inn reisemiddel fra hjemreise/neste reise for å fylle inn tomme felt i delreise (hvor det er blitt gjort en reise)

reisefil_0 <- reisefil_0 %>%     
  left_join(steal_purpose, by = "key", value = "steal") %>% 
  mutate(formål = case_when(
    formål == "Hjem" ~ steal,
    TRUE ~ formål
  )) %>% 
  left_join(steal_mode, by = "key", value = "steal2") %>% 
  mutate(reisemiddel = case_when(
    !is.na(reisetid) & is.na(reisemiddel)  ~ steal2,
    TRUE ~ reisemiddel
  )) %>% 
  mutate(reisemiddel = as.character(reisemiddel)) %>% 
  mutate(reisemiddel = case_when(
    str_detect(reisemiddel, "plane|Train|Ferry") ~ "Public transportation",
    T ~ reisemiddel
  )) %>% 
  select(-c(steal,steal2)) %>%   # remove the columns from df
  mutate(reisetid = case_when(
    is.na(formål) ~ NA_real_,
    TRUE ~ reisetid),
    reisemiddel = case_when(
      is.na(formål) ~ NA_character_,
      TRUE ~ reisemiddel)
  )  %>% 
  mutate(dato = case_when(           # fikser datoer som er oppgitt feil
    dato < "2020-04-01" | dato > "2021-10-01" ~ lag(dato),  
    TRUE ~ dato)
  ) %>%  
  mutate(tidskategori = case_when(
    reisetid <= 5 ~ "< 5 min",
    reisetid <= 10 ~ "5 - 10 min",
    reisetid <= 15 ~ "10 - 15 min",
    reisetid <= 30 ~ "15 - 30 min",
    reisetid <= 60 ~ "30 - 60 min",
    reisetid <= 120 ~ "1 - 2 hours",
    reisetid > 120 ~ "> 2 hours",
    TRUE ~ as.character(reisetid)
  )) %>% 
  mutate(tidskategori = fct_relevel(
    tidskategori, tidskategori_levels
  )) %>% 
  filter(!is.na(antall_reiser))


# 
# reisefil_0 %>%
#   filter(is.na(formål) & !is.na(reisetid)) %>%
#   View
# 
# reisefil_0 %>%
#   filter(!is.na(formål), is.na(reisemiddel)) %>% 
#   View




# PERSONFIL OG REISEFIL ---------------------------------------------------


setwd("~/00_PhD_lokal/RVU_corona/RVU_korona_github")
Sys.setlocale(locale = "English")

personfil <- personfil_0
reisefil <- reisefil_0

write.csv2(personfil, "personfil_korona.csv")
write.csv2(reisefil, "reisefil_korona.csv")





# Om man ikke vil kjøre alt, men bare hente fra CSV
personfil <- read.csv2("personfil_korona.csv")
reisefil <- read.csv2("reisefil_korona.csv")







# relevelling after unpacking csv. Search "_levels" for all level-worthy variables

month_vec <- month.abb[1:38%%13]
month_levels <- paste0(month_vec, "'", c(rep(19,12),rep(20,12),rep(21,12) ))
mode_levels <- c("Car, driver", "Car, passenger", "Public transportation", "Pedal bike", "Electrical bike", "By foot", "MC, other" )
tidskategori_levels <- c("< 5 min", "5 - 10 min", "10 - 15 min","< 15 min", "15 - 30 min", 
                         "30 - 50 min","30 - 60 min","1 - 2 hours", "> 2 hours", "50 - 90 min",
                         "1.5 - 3 hours","> 3 hours")

tellekategori_levels <- c("No trips",
                          "1-2 trips",
                          "3-4 trips",
                          "5-6 trips", 
                          "7+ trips")
formål_levels_roundtrip = c(
  "To/from workplace",
  "School/university",
  "Business trip / temporary accomodation",
  "Shopping/grocery/service", 
  "Pick up/drop off trip",
  "Free time activities",
  "Undirected round trips",
  "Other"
)

formål_levels_rvu = c(
  "To/from workplace",
  "School/university",
  "Business trip / temporary accomodation",
  "Shopping/grocery/service", 
  "Pick up/drop off trip",
  "Free time activities",
  "Other"
)



Sys.setlocale(locale = "English")
day_levels = as.character(wday(1:7, label = T))[c(2:7,1)]




personfil <- personfil %>% 
  as_tibble() %>% 
  mutate( 
    #tidskategori = fct_relevel(tidskategori, tidskategori_levels),
    monthyear = fct_relevel(monthyear, levels = month_levels),
    tellekategori = fct_relevel(tellekategori, levels = tellekategori_levels),
    day = fct_relevel(day, day_levels)
  )

  
reisefil <- reisefil %>% 
  as_tibble() %>% 
  mutate(tidskategori = fct_relevel(tidskategori, tidskategori_levels),
         monthyear = fct_relevel(monthyear, levels = month_levels),
         tellekategori = fct_relevel(tellekategori, levels = tellekategori_levels),
         reisemiddel = fct_relevel(reisemiddel, levels = mode_levels),
         formål = fct_relevel(formål, levels = formål_levels_roundtrip),
         day = fct_relevel(day, day_levels)
  )
  
  
  
  
  

# Anecdotes (under arbeid) ---------------------------------------------------------------

# find them in the comments in w_total$annerledes_hvisja

anecdotes_rows <- c(61, 66, 64, 215, 224, 286, 319, 659, 796, 975, 1060, 1103, 1130, 1266, 1276)

w_total$annerledes_hvisja %>% 
  mutate(rownum = row_number()) %>% 
  filter(rownum %in% anecdotes_rows) %>% 
  View()

w_total$annerledes_hvisja[anecdotes_rows] %>% 
  filter(., row_number() == 2
        ) %>% 
  View()

w_total$annerledes_hvisja






# Grafer og tabeller og tall ------------------------------------------------------------------


library(openxlsx)
library(RColorBrewer)
library(wesanderson)

excelRVU <- createWorkbook()





# Svartid + rekruttering --------------------------------------------------



vite_nms <- c("Other", "Word by mouth", "Flyer or poster", "Social media")
table_vite <- table(unlist(vite)) %>% 
  as.data.frame()

table_vite[,1] <-  vite_nms


table_vite %>% 
  ggplot(aes( x = reorder(Var1, Freq), y = Freq)) +
  geom_col(fill = "azure2", alpha = 0.7, color = "black") +
  labs(title = paste0("How did you find out about the survey? N = ", nrow(w_total)),
       subtitle = "Possible to choose multiple sources",
       x = "", y = "") + 
  geom_text(aes(x = reorder(Var1, Freq), y = 46, label = paste0("n = ", Freq)),
            position = position_dodge(width = 2)) +
  coord_flip() +
  theme(legend.title = element_blank(),
        plot.title = element_text(lineheight = 0.9, size = 12),
        plot.subtitle = element_text(color = "grey20"))


ggsave(path = "RVUcorona_ggsave_output" ,"vite.png", width = 160, height = 60, units = "mm")



svartid <- personfil_0 %>% 
  select(Svartid) %>% 
  mutate(timer = parse_number(str_extract(Svartid, "\\d{0,2} t")),
         minutter = parse_number(str_extract(Svartid, "\\d{0,2} m")),
         sekunder = parse_number(str_extract(Svartid, "\\d{0,2} s")),
         
  ) %>% 
  mutate_all(funs(replace_na(.,0)))       %>% 
  mutate(kolonn = paste(timer, minutter, sekunder, sep = ":"),
         hms = hms(kolonn),
         in_seconds = seconds(hms)) %>%  
  as.data.frame(.)

mean_median <- svartid %>% 
  filter(timer == 0, minutter < 30) %>% 
  select(minutter,sekunder,hms) %>% 
  summarize(mean = mean(minutter), med = median(minutter))

svartid %>% 
  filter(timer == 0, minutter < 30) %>% 
  ggplot(aes(minutter )) +
  geom_density(stat = "density", fill = "azure2", alpha = 0.3 ) +
  labs(x = "Survey response in minutes", y = "Density") +
  scale_x_continuous(breaks = seq(0,20,1) , limits = c(0,20)) +
  geom_vline(aes(xintercept = mean_median$med, color = "Median"), size =0.8) +
  geom_vline(aes(xintercept = mean_median$mean, color = "Mean"), size =0.8)+
  scale_color_manual(values = c(Median = "darkorange", Mean = "slateblue4" ))+
  scale_linetype_manual(values = c(Median = 1, Mean = 2)) +
  theme(legend.title = element_blank() ,legend.position = c(0.8, 0.6))
ggsave(path = "RVUcorona_ggsave_output" ,"svartid_density.png", width = 160, height = 60, units = "mm")


#geom_text(aes( x = c(4,4.755), y = 0.025), labels = c("Median", "Mean")) +
#paste0("Median ", mean_median$med, " minutes")



personfil %>% 
  group_by(monthyear) %>% 
  mutate(n = n() ) %>% 
  ggplot() +
  geom_bar(aes(x = monthyear, group = monthyear), 
           stat = "count") +
  labs(title = "Respondents per month",
       x = "", y = "") +
  theme(plot.title = element_text(lineheight = 0.9, size = 12),
        plot.subtitle = element_text(color = "grey20"),
        axis.text.x = element_text(angle = 90)
  ) +
  geom_text(aes(x = monthyear,label = paste0("n = ", n)), stat = "count", vjust = -1, size = 2) 
ggsave(path = "RVUcorona_ggsave_output" ,"respondents_month.png", width = 160, height = 75, units = "mm")





# Sammenlignet RVU18/19/20 (PER ÅR) --------------------------------------------



# RVU18/19 national numbers (see below for Trondheim RVU)

# bilfører, bilpassasjer, kollektivt, Sykkel, fots, annet
mode_levels_agbike <- c("Car, driver", "Car, passenger", "Public transportation", "Bike", "By foot", "MC, other" )

# cbind(
#   rvu18_19 = c(0.53, 0.10, 0.11, 0.05, 0.2, 0.01),
#   rvu20 = c(0.54, 0.10, 0.08, 0.04, 0.23, 0.01),
#   rvu_korona = c(0.37, 0.08, 0.15, 0.13, 0.25, 0.01)
# ) %>% 
#   as_tibble() %>% 
#   mutate(reisemiddel = factor(mode_levels_agbike, levels = mode_levels_agbike)) %>% 
#   pivot_longer(!reisemiddel, names_to = "rvu_version", values_to = "prosent") %>% 
#   ggplot() +
#   geom_col(aes(y = rvu_version, prosent, fill = reisemiddel), position = position_stack(reverse = T)) +
#   scale_x_continuous(labels = scales::percent) +
#   scale_fill_brewer(palette="Spectral", direction = -1) +
#   theme(title = element_text(size = 4),
#         legend.title = element_blank(), 
#         axis.title = element_text(size = 5), 
#         axis.text = element_text(size = 4),
#         axis.text.x = element_text(angle = 0),
#         legend.key.size = unit(2, "mm"), 
#         legend.background = element_rect(fill = NA), 
#         legend.text = element_text(size = 4)
#   ) +
#   labs(x = "", y = "") +
#   geom_text(aes(y = rvu_version, prosent, label = scales::percent(prosent, accuracy = 1L)), 
#             position = position_stack(reverse = T, vjust = 0.5), size = 1)
# ggsave(path = "RVUcorona_ggsave_output" ,"modeshare_all_RVUs.png", width = 80, height = 20, units = "mm")  





# reisemiddel

reisefil %>% 
  select(reisemiddel, student) %>%
  filter(!is.na(reisemiddel)) %>%
  mutate(reisemiddel = as.character(reisemiddel)) %>%
  mutate(reisemiddel = case_when(
    str_detect(reisemiddel, "bike") ~ "Bike",
    T ~ reisemiddel
  )) %>%
  group_by(student) %>% 
  mutate(n_stud = n()) %>% 
  group_by(reisemiddel, student) %>%
  summarise(n_perc = n(), perc = n_perc/n_stud) %>% 
  distinct() %>% 
  arrange(student)



# Trondheim RVU18/19/20
mode_levels
mode_levels_agbike <- c("Car, driver", "Car, passenger", "Public transportation", "Bike", "By foot", "MC, other" )


all_rvu_trd <- cbind(
  rvu18_19_trd = c(0.40, 0.04, 0.18, 0.19, 0.17, 0.01),
  rvu20_trd = c(0.45, 0.04, 0.18, 0.15, 0.17, 0.02),
  rvu_korona_total = c(0.37, 0.08, 0.15, 0.13, 0.25, 0.01),
  rvu_korona_stud = c(0.11, 0.07, 0.25, 0.14, 0.42, 0.01),
  rvu_korona_non_stud = c(0.5, 0.09, 0.10, 0.13, 0.17, 0.01)
) %>% 
  as_tibble() %>% 
  mutate(reisemiddel = factor(mode_levels_agbike, levels = mode_levels_agbike)) %>% 
  pivot_longer(!reisemiddel, names_to = "rvu_version", values_to = "prosent") %>% 
  mutate(rvu_version = factor(rvu_version, levels = c("rvu18_19_trd", "rvu20_trd", "rvu_korona_total", "rvu_korona_non_stud", "rvu_korona_stud"))) %>% 
  mutate(avg_trips = case_when(
    rvu_version == "rvu18_19_trd" ~ 2.96,
    rvu_version == "rvu20_trd" ~ 2.47,
    rvu_version == "rvu_korona_total" ~ mean(personfil$antall_reiser),
    rvu_version == "rvu_korona_non_stud" ~ 2.24,
    rvu_version == "rvu_korona_stud" ~ 2.28,
    T ~ NA_real_
  )) %>% 
  mutate(n_rel = prosent*avg_trips) 


# all_rvu_trd %>%   
#   ggplot() +
#   geom_col(aes(y = reorder(rvu_version, desc(rvu_version)), prosent, fill = reisemiddel), position = position_stack(reverse = T)) +
#   scale_x_continuous(labels = scales::percent) +
#   scale_fill_brewer(palette="Spectral", direction = 1) +
#   theme(title = element_text(size = 4),
#         legend.title = element_blank(), 
#         axis.title = element_text(size = 5), 
#         axis.text = element_text(size = 4),
#         axis.text.x = element_text(angle = 0),
#         legend.key.size = unit(2, "mm"), 
#         legend.background = element_rect(fill = NA), 
#         legend.text = element_text(size = 4)
#   ) +
#   labs(x = "", y = "") +
#   geom_text(aes(y = rvu_version, prosent, label = scales::percent(prosent, accuracy = 1L)), 
#             position = position_stack(reverse = T, vjust = 0.5), size = 1)
# 
# ggsave(path = "RVUcorona_ggsave_output" ,"modeshare_TRD_RVUs_stud.png", width = 80, height = 20, units = "mm") 



all_rvu_trd %>% 
  ggplot() +
  geom_col(aes(y = reorder(rvu_version, desc(rvu_version)), n_rel, fill = reisemiddel), position = position_stack(reverse = T)) +
  scale_fill_brewer(palette="Spectral", direction = 1) +
  guides(fill=guide_legend(title="Trip purpose")) +
  theme(title = element_text(size = 4),
        legend.title = element_text(size = 5), 
        axis.title = element_text(size = 5), 
        axis.text = element_text(size = 5),
        axis.text.x = element_text(angle = 0),
        legend.key.size = unit(2, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 4),
        legend.position = "top"
  ) +
  labs(x = "", y = "") +
  geom_text(aes(y = rvu_version, x = avg_trips, label = paste0("n = ", round(avg_trips, digits = 2))), 
            size = 1.7, 
            position=position_dodge(width=0.9), 
            hjust = -0.3,
            color = "grey30") +
  geom_text(aes(y = rvu_version, n_rel, label = scales::percent(prosent, accuracy = 1L)), 
            position = position_stack(reverse = T, vjust = 0.5), size = 1.5) +
  scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0,3.1))

ggsave(path = "RVUcorona_ggsave_output" ,"modeshare_TRD_RVUs_stud_2.png", width = 160, height = 50, units = "mm")




# Formål. NRVU sine kategorier og rekkefølge

formål_levels_roundtrip = c(
  "To/from workplace",
  "School/university",
  "Business trip / temporary accomodation",
  "Shopping/grocery/service", 
  "Pick up/drop off trip",
  "Free time activities",
  "Other"
)

formål_levels_rvu = c(
  "To/from workplace",
  "School/university",
  "Business trip / temporary accomodation",
  "Shopping/grocery/service", 
  "Pick up/drop off trip",
  "Free time activities",
  "Other"
)


# finne tall for tabell.

reisefil %>% 
  filter(!is.na(formål)) %>% 
  mutate(formål = case_when(
    str_detect(formål, "Health") ~ "Shopping/grocery/service",
    str_detect(formål, "round") ~ "Free time activities",
    str_detect(formål, "cabin") ~ "Other",
    T ~ formål
  )) %>% 
  mutate(formål = fct_relevel(formål, levels = formål_levels_roundtrip)) %>% 
  group_by(formål) %>% 
  summarise(n = n(), perc = n/nrow(.)) 
# group_by(student) %>% 
# mutate(n_stud = n()) %>% 
# group_by(formål, student) %>%
# summarise(n_perc = n(), perc = n_perc/n_stud) %>% 
# distinct() %>% 
# arrange(student)

# til/fra arbeid, skole/studiested, tjenestereise, handle/service, 
# 5) omsorgs, fritid + besøk, annet

personfil %>% 
  group_by(student) %>% 
  summarise(avg = mean(antall_reiser))

all_rvu_formål <- cbind(
  rvu18_19 = c(0.21, 0.03, 0.03, 0.28, 0.09, 0.33, 0.02),
  rvu20 = c(0.60, 0.10, 0.08, 0.79, 0.26, 0.65+0.29, 0.05)/2.82,
  rvu_korona_total = c(0.19, 0.1, 0.02, 0.28, 0.07, 0.27, 0.06),
  rvu_korona_stud = c(0.08, 0.27, 0.01, 0.28, 0.011, 0.3, 0.04),
  rvu_korona_non_stud = c(0.25, 0.01, 0.02, 0.28, 0.10, 0.26, 0.06)
) %>% 
  as_tibble() %>% 
  mutate(formål = factor(formål_levels_rvu, levels = formål_levels_rvu)) %>% 
  pivot_longer(!formål, names_to = "rvu_version", values_to = "prosent") %>% 
  mutate(rvu_version = factor(rvu_version, 
                              levels = c("rvu18_19", "rvu20", "rvu_korona_total", "rvu_korona_non_stud", "rvu_korona_stud"))) %>%
  mutate(avg_trips = case_when(
    rvu_version == "rvu18_19" ~ 2.82,
    rvu_version == "rvu20" ~ 2.4,
    rvu_version == "rvu_korona_total" ~ mean(personfil$antall_reiser),
    rvu_version == "rvu_korona_non_stud" ~ 2.24,
    rvu_version == "rvu_korona_stud" ~ 2.28,
    T ~ NA_real_
  ))

# all_rvu_formål %>% 
#   ggplot() +
#   geom_col(aes(y = reorder(rvu_version, desc(rvu_version)), prosent, fill = formål), position = position_stack(reverse = T)) +
#   scale_x_continuous(labels = scales::percent) +
#   scale_fill_brewer(palette="Spectral", direction = 1) +
#   guides(fill=guide_legend(title="Trip purpose")) +
#   theme(title = element_text(size = 4),
#         legend.title = element_text(size = 5), 
#         axis.title = element_text(size = 5), 
#         axis.text = element_text(size = 5),
#         axis.text.x = element_text(angle = 0),
#         legend.key.size = unit(2, "mm"), 
#         legend.background = element_rect(fill = NA), 
#         legend.text = element_text(size = 4),
#         legend.position = "top"
#   ) +
#   labs(x = "", y = "") +
#   geom_text(aes(y = rvu_version, prosent, label = scales::percent(prosent, accuracy = 1L)), 
#             position = position_stack(reverse = T, vjust = 0.5), size = 1)
# 
# ggsave(path = "RVUcorona_ggsave_output" ,"purposeshare_all_RVUs_stud.png", width = 160, height = 35, units = "mm")  


all_rvu_formål %>% 
  mutate(n_rel = prosent*avg_trips) %>% 
  ggplot() +
  geom_col(aes(y = reorder(rvu_version, desc(rvu_version)), n_rel, fill = formål), position = position_stack(reverse = T)) +
  scale_fill_brewer(palette="Spectral", direction = 1) +
  guides(fill=guide_legend(title="Trip purpose")) +
  theme(title = element_text(size = 4),
        legend.title = element_text(size = 5), 
        axis.title = element_text(size = 5), 
        axis.text = element_text(size = 5),
        axis.text.x = element_text(angle = 0),
        legend.key.size = unit(2, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 4),
        legend.position = "top"
  ) +
  labs(x = "", y = "") +
  geom_text(aes(y = rvu_version, x = avg_trips, label = paste0("n = ", round(avg_trips, digits = 2))), 
            size = 1.7, 
            position=position_dodge(width=0.9), 
            hjust = -0.3,
            color = "grey30") +
  geom_text(aes(y = rvu_version, n_rel, label = scales::percent(prosent, accuracy = 1L)), 
            position = position_stack(reverse = T, vjust = 0.5), size = 1.5) +
  scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0,3.1))

ggsave(path = "RVUcorona_ggsave_output" ,"purposeshare_all_RVUs_stud_2.png", width = 110, height = 40, units = "mm") 





# WFH / hjemmekontor + reisemiddel
levels(reisefil$reisemiddel)

bn <- reisefil %>% 
 # filter(!is.na(hjemmekontor), !is.na(reisemiddel)) %>% 
  # mutate(reisemiddel = as.character(reisemiddel)) %>%
  # mutate(reisemiddel = case_when(
  #   str_detect(reisemiddel, "bike") ~ "Bike",
  #   T ~ reisemiddel
  # )) %>%
  # mutate(reisemiddel = factor(mode_levels_agbike, levels = mode_levels_agbike)) %>%
  group_by(hjemmekontor) %>% 
  mutate(n = sum(!is.na(reisemiddel)), avg_trips = mean(antall_reiser)) %>% 
  filter(!is.na(hjemmekontor), !is.na(reisemiddel)) %>% 
  group_by(hjemmekontor, reisemiddel) %>% 
  summarise(prosent = n()/n, avg_trips) %>% 
  distinct() 

nm <- tibble(
    hjemmekontor = rep("NTS'18/19", 7),
    reisemiddel = mode_levels,
    prosent = c(0.6, 0.07, 0.1, 0.05, 0, 0.17, 0.01), # Heltid yrkesaktiv
    avg_trips = rep(3.17, 7)
    )

bind_rows(bn, nm) %>% 
  #pivot_longer(!reisemiddel, names_to = "rvu_version", values_to = "prosent") %>% 
  mutate(n_rel = avg_trips*prosent) %>% 
  mutate(hjemmekontor = factor(hjemmekontor, levels = rev(c("NTS'18/19", "Go to work as usual",
                                                             "Work from home", "Other")))) %>% 
  mutate(reisemiddel = factor(reisemiddel, mode_levels)) %>% 
  ggplot(aes(y = hjemmekontor)) +
  geom_col(aes(n_rel, fill = reisemiddel), position = position_stack(reverse = T)) +
  scale_fill_brewer(palette="Spectral", direction = 1) +
  theme(title = element_text(size = 4),
        legend.title = element_blank(), 
        axis.title = element_text(size = 5), 
        axis.text = element_text(size = 4),
        axis.text.x = element_text(angle = 0),
        legend.key.size = unit(2, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 4),
        legend.position = "top"
  ) +
  labs(x = "", y = "") +
  geom_text(aes(n_rel, label = scales::percent(prosent, accuracy = 1L)), 
            position = position_stack(reverse = T, vjust = 0.5), size = 1.5) +
  geom_text(aes(x = avg_trips, label = paste0("n = ", round(avg_trips, digits = 2))), 
            size = 1.5, 
            position=position_dodge(width=0.9), hjust = -0.3, color = "grey34") +
  scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0,3.5))
ggsave(path = "RVUcorona_ggsave_output" ,"modeshare_homeoffice.png", width = 120, height = 40, units = "mm")  






# Mode, trip purpose, PER MÅNED ------------------------------------------------



# Gjennomsnittlig antall reiser per måned

summary(personfil$antall_reiser)  # for mean og median


korona_antallreiser <- personfil %>% 
  group_by(monthyear) %>%
  summarize(n = n(), rvu_korona = mean(antall_reiser)) %>% 
  filter(n > 10) %>% 
  select(-n)

cbind(
  monthyear = month_levels[13:24],
  rvu18_19 = c(2.7, 2.6, 2.9, 2.8, 3.0, 2.9, 2.5, 2.8, 3.0, 3, 2.9, 2.6),
  rvu20    = c(2.7, 3.0, 2.2, 1.6, 1.9, 1.9, 1.7, 2.3, 2.4, 3, 2.6, 2.5)
  ) %>% 
  as_tibble() %>%
  mutate(across(c("rvu18_19", "rvu20"), as.double)) %>% 
  full_join(.,korona_antallreiser, by = "monthyear") %>% 
  pivot_longer(!monthyear, names_to = "rvu_version", values_to = "avg_antallreiser") %>%  
  mutate(monthyear = fct_relevel(monthyear, levels = month_levels)) %>%
  ggplot(aes(monthyear, avg_antallreiser, color = rvu_version, group = rvu_version)) +
  geom_line() +
  geom_point() +
  theme(title = element_text(size = 7),
        legend.title = element_blank(), 
        legend.position = c(0.87,0.87),
        axis.title = element_text(size = 7), 
        axis.text = element_text(size = 7),
        axis.text.x = element_text(angle = 90),
        legend.key.size = unit(4, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 7)
  ) +
  labs(y = "Average number of trips", x = "")
ggsave(path = "RVUcorona_ggsave_output" ,"avg_trips_all_RVUs.png", width = 160, height = 60, units = "mm")
  

personfil %>% 
  group_by(monthyear) %>% 
  filter(n() > 50) %>%
  summarize(n = n(), antall_reiser = antall_reiser, avg = mean(antall_reiser)) %>% 
  ggplot() +
  geom_boxplot(aes( y = reorder(monthyear, desc(monthyear)), x = antall_reiser)) +
  labs(y = "Months (n > 50)", x = "Trips a day per person") +
  geom_text(aes(y = monthyear, x = 8.4, label = paste0("n = ", n)), size = 2) +
  scale_x_continuous(breaks = seq(0,10,2)) + 
  geom_point(aes( x = avg, y = monthyear), color = "deepskyblue1") +
  geom_text(aes( x = avg, y = monthyear, 
                 label = paste0("= ", round(avg, digits = 1))),
            size = 2, color = "deepskyblue1", hjust = -0.5) +
 # geom_vline(aes(xintercept = 2, color = "Median"), size =0.5, linetype = "dashed") +
 # geom_vline(aes(xintercept = 2.25, color = "Mean"), size =0.6) +
 # scale_color_manual(values = c(Median = "darkorange", Mean = "slateblue4" )) +
  guides(color=guide_legend(title="Global:")) +
  theme(legend.position = c(0.92, 0.5),
        text = element_text(size = 7),          # text, endrer all tekst
        axis.text = element_text(size = 5),
        legend.background = element_rect(fill = NA))

ggsave(path = "RVUcorona_ggsave_output" ,"trips_monthyear.png", width = 160, height = 70, units = "mm")


reisefil %>% 
  filter(!is.na(reisemiddel)) %>% 
  group_by(monthyear) %>% 
  mutate(n_month = n()) %>% 
  filter(n_month > 100) %>%
  group_by(monthyear,reisemiddel) %>% 
  summarize(n_month, prosent = n()/n_month) %>%
  distinct() %>% 
  ggplot() +
  geom_col( aes (y = reorder(monthyear, desc(monthyear)), x = prosent,  fill = reisemiddel), position = position_fill(reverse = TRUE)) +
  geom_text(aes(y = monthyear, x = 1.05, label = paste0("n = ", n_month)), size = 2) +
  geom_text(aes(y = monthyear, prosent, label = scales::percent(prosent, accuracy = 1L)), 
            position = position_stack(reverse = T, vjust = 0.5), size = 1.5) +
  theme(title = element_text(size = 7),
        legend.title = element_blank(), 
        axis.title = element_text(size = 6), 
        axis.text = element_text(size = 6),
        
        legend.key.size = unit(4, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 7)
  ) +
  labs( x = "", y = "", title = "Mode share per month (n > 100 trips per month)") +
  scale_x_continuous(labels = scales::percent) +
  scale_fill_brewer(palette = "PRGn", direction = -1)

ggsave(path = "RVUcorona_ggsave_output" ,"mode_monthyear.png", width = 160, height = 65, units = "mm")




# reisemiddel + absolutte antall reiser per måned

reisefil %>% 
  #filter(!is.na(reisemiddel)) %>% 
  group_by(monthyear) %>% 
  mutate(n_month = sum(!is.na(formål))) %>%
  mutate(avg_trips_month = mean(antall_reiser)) %>% 
  filter(!is.na(reisemiddel)) %>% 
  group_by(monthyear, reisemiddel) %>%
  mutate(n_mode_abs = n(),                      # sum antall turer med et transportmiddel den måneden
         prosent = n_mode_abs/n_month,  
         n_mode_rel = prosent*avg_trips_month) %>% 
  distinct(monthyear, reisemiddel, .keep_all = T) %>% 
  
  filter(n_month > 200) %>%
  mutate(reisemiddel = fct_relevel(reisemiddel, mode_levels)) %>%   

  ggplot(aes (y = reorder(monthyear, desc(monthyear))),
         stat = 'identity', 
         position = position_stack(reverse = TRUE)) +
  
  geom_col( aes(x = n_mode_rel,  fill = reisemiddel), 
            position = position_stack(reverse = TRUE)) +
  
  geom_text(aes(x = avg_trips_month, label = paste0("n = ", round(avg_trips_month, digits = 2))), 
            size = 2, 
            position=position_dodge(width=0.9), hjust = -0.5) +
  geom_text(aes( x = n_mode_rel, label = scales::percent(prosent, accuracy = 1L), group = reisemiddel), 
            position = position_stack( reverse = T, vjust = 0.5), size = 1.5) +
  # geom_text(aes( x = n_formål_rel, label = scales::percent(prosent, accuracy = 1L)), 
  #           position = position_stack(reverse = T, vjust = 0.5), size = 1.5) +
  # 
  theme(title = element_text(size = 5.5),
        legend.title = element_blank(), 
        axis.title = element_text(size = 6), 
        axis.text = element_text(size = 5),
        
        legend.key.size = unit(4, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 6)
  ) +
  labs( x = "Average number of trips per person per day", y = "", title = "Mode distribution per month (n > 200 trips per month)") +
  scale_fill_brewer(palette = "Spectral", direction = 1) +
  scale_x_continuous(breaks = seq(0,3.2,0.5), limits = c(0,3.1))

ggsave(path = "RVUcorona_ggsave_output" ,"mode_monthyear.png", width = 160, height = 50, units = "mm")







# formål/purpose per month

# reisefil %>% 
#   filter(!is.na(formål)) %>% 
#   mutate(formål = case_when(
#     str_detect(formål, "Health") ~ "Shopping/grocery/service",
#     str_detect(formål, "round") ~ "Free time activities",
#     str_detect(formål, "cabin") ~ "Other",
#     T ~ formål
#   )) %>% 
#   mutate(formål = fct_relevel(formål, formål_levels_roundtrip)) %>% 
#   group_by(monthyear) %>% 
#   mutate(n_month = n()) %>% 
#   filter(n_month > 100) %>%
#   group_by(monthyear,formål) %>% 
#   summarize(n_month, prosent = n()/n_month) %>%
#   distinct() %>% 
#   ggplot() +
#   geom_col( aes (y = reorder(monthyear, desc(monthyear)), x = prosent,  fill = formål), position = position_fill(reverse = TRUE)) +
#   geom_text(aes(y = monthyear, x = 1.05, label = paste0("n = ", n_month)), size = 2) +
#   geom_text(aes(y = monthyear, prosent, label = scales::percent(prosent, accuracy = 1L)), 
#             position = position_stack(reverse = T, vjust = 0.5), size = 1.5) +
#   theme(title = element_text(size = 7),
#         legend.title = element_blank(), 
#         axis.title = element_text(size = 6), 
#         axis.text = element_text(size = 6),
#         
#         legend.key.size = unit(4, "mm"), 
#         legend.background = element_rect(fill = NA), 
#         legend.text = element_text(size = 7)
#   ) +
#   labs( x = "", y = "", title = "Shares of trip purpose per month (n > 100 trips per month)") +
#   scale_x_continuous(labels = scales::percent) +
#   scale_fill_brewer(palette = "Spectral", direction = 1)
# 
# ggsave(path = "RVUcorona_ggsave_output" ,"purpose_monthyear_n100.png", width = 160, height = 65, units = "mm")

?RColorBrewer
  





# absolutte antall reiser + mode distribution

reisefil %>% 
 # filter(!is.na(formål)) %>% 
  # mutate(formål = case_when(
  #   str_detect(formål, "Health") ~ "Shopping/grocery/service",
  #   str_detect(formål, "round") ~ "Free time activities",
  #   str_detect(formål, "cabin") ~ "Other",
  #   T ~ formål
  # )) %>% 
  group_by(monthyear) %>% 
  mutate(n_month = sum(!is.na(formål))) %>%  # totalt antall turer i måneden
  #add_count() %>% 
  mutate(avg_trips_month = mean(antall_reiser)) %>% 
  filter(!is.na(formål)) %>% 
  group_by(monthyear, formål) %>%
  mutate(n_formål_abs = n(),                      # sum antall turer med et transportmiddel den måneden
         prosent = n_formål_abs/n_month,  
         n_formål_rel = prosent*avg_trips_month) %>% 
  distinct(monthyear, formål, .keep_all = T) %>% 
  filter(n_month > 100) %>%
  mutate(formål = fct_relevel(formål, formål_levels_roundtrip)) %>% 
  
  ggplot(aes (y = reorder(monthyear, desc(monthyear)))) +
  geom_col( aes(x = n_formål_rel,  fill = formål), 
            position = position_stack(reverse = TRUE)) +
  
  geom_text(aes(x = avg_trips_month, label = paste0("n = ", round(avg_trips_month, digits = 2))), 
            size = 2, 
            position=position_dodge(width=0.9), hjust = -0.3) +
  geom_text(aes( x = n_formål_rel, label = scales::percent(prosent, accuracy = 1L), group = formål), 
            position = position_stack( reverse = T, vjust = 0.5), size = 1.5) +
  # geom_text(aes( x = n_formål_rel, label = scales::percent(prosent, accuracy = 1L)), 
  #           position = position_stack(reverse = T, vjust = 0.5), size = 1.5) +
  # 
  theme(title = element_text(size = 5),
        legend.title = element_blank(), 
        axis.title = element_text(size = 5), 
        axis.text = element_text(size = 5),
        
        legend.key.size = unit(4, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 5),
        legend.position = "top"
  ) +
  labs( x = "Average number of trips per person per day", y = "", title = "Shares of trip purposes per month (n > 100 trips per month)") +
  scale_fill_brewer(palette = "Spectral", direction = 1) +
  scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0,3.1))

ggsave(path = "RVUcorona_ggsave_output" ,"purpose_monthyear_n100.png", width = 160, height = 60, units = "mm")





# Mode, trip purpose, frequency PER WEEK ---------------------------------------------
?Sys.setlocale
Sys.setlocale(locale = "English")



reisefil %>% 
  count(formål)

reisefil %>% 
  group_by(day) %>% 
  mutate(n_day = sum(!is.na(formål))) %>%  # totalt antall turer i måneden
  mutate(avg_trips_day = mean(antall_reiser)) %>% 
  filter(!is.na(formål)) %>% 
  group_by(day, formål) %>%
  mutate(n_day_abs = n(),                      # sum antall turer med et transportmiddel den måneden
         prosent = n_day_abs/n_day,  
         n_day_rel = prosent*avg_trips_day) %>% 
  distinct(day, formål, .keep_all = T) %>% 
  mutate(formål = fct_relevel(formål, formål_levels_roundtrip)
         #, formål = fct_rev(formål)
         ) %>% 
  
  ggplot(aes (y = reorder(day, desc(day)))) +
  geom_col( aes(x = n_day_rel,  fill = formål), 
            position = position_stack(reverse = TRUE)) +
  
  geom_text(aes(x = avg_trips_day, label = paste0("n = ", round(avg_trips_day, digits = 2))), 
            size = 2, 
            position=position_dodge(width=0.9), hjust = -0.3) +
  geom_text(aes( x = n_day_rel, label = scales::percent(prosent, accuracy = 1L), group = formål), 
            position = position_stack( reverse = T, vjust = 0.5), size = 1.5) +
  
  theme(title = element_text(size = 5),
        legend.title = element_blank(), 
        axis.title = element_text(size = 5), 
        axis.text = element_text(size = 5),
        
        legend.key.size = unit(4, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 5),
        legend.position = "top"
  ) +
  labs( x = "Average number of trips per person", y = "", title = "Shares of trip purposes per weekday") +
  scale_fill_brewer(palette = "Spectral", direction = 1) +
  scale_x_continuous(breaks = seq(0,2.8,0.5), limits = c(0,2.8))

ggsave(path = "RVUcorona_ggsave_output" ,"trip_purpose_weekday.png", dpi = 300, units = "mm", width = 160, height = 60)





reisefil %>% 
  group_by(day) %>% 
  mutate(n_day = sum(!is.na(reisemiddel))) %>%  # totalt antall turer i måneden
  mutate(avg_trips_day = mean(antall_reiser)) %>% 
  filter(!is.na(reisemiddel)) %>% 
  group_by(day, reisemiddel) %>%
  mutate(n_day_abs = n(),                      # sum antall turer med et transportmiddel den måneden
         prosent = n_day_abs/n_day,  
         n_day_rel = prosent*avg_trips_day) %>% 
  distinct(day, reisemiddel, .keep_all = T) %>% 
  
  ggplot(aes (y = reorder(day, desc(day)))) +
  geom_col( aes(x = n_day_rel,  fill = reisemiddel), 
            position = position_stack(reverse = TRUE)) +
  
  geom_text(aes(x = avg_trips_day, label = paste0("n = ", round(avg_trips_day, digits = 2))), 
            size = 2, 
            position=position_dodge(width=0.9), hjust = -0.3) +
  geom_text(aes( x = n_day_rel, label = scales::percent(prosent, accuracy = 1L), group = reisemiddel), 
            position = position_stack( reverse = T, vjust = 0.5), size = 1.5) +
  
  theme(title = element_text(size = 5),
        legend.title = element_blank(), 
        axis.title = element_text(size = 5), 
        axis.text = element_text(size = 5),
        
        legend.key.size = unit(4, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 5),
        legend.position = "top"
  ) +
  labs( x = "Average number of trips per person", y = "", title = "") +
  scale_fill_brewer(palette = "Spectral", direction = 1) +
  scale_x_continuous(breaks = seq(0,2.8,0.5), limits = c(0,2.8))

ggsave(path = "RVUcorona_ggsave_output" ,"mode_weekday.png", dpi = 300, units = "mm", width = 160, height = 60)





# antall reiser -----------------------------------------------------------







personfil_0 %>% 
  filter(!is.na(arbeidsplass)) %>% 
  ggplot(aes(x = reorder(tellekategori, desc(tellekategori)), group = arbeidsplass)) +
  geom_bar(aes( y = ..prop..,fill = arbeidsplass), alpha = 0.6, show.legend = F) +
  labs(title = "Number of trips in a day by occupation", x = "", y = "") +
  scale_y_continuous(labels = scales::label_percent(accuracy = 1L)) +
  guides(fill=guide_legend(title=NULL))+
  coord_flip()+
  facet_wrap(~ arbeidsplass) +
  theme(text = element_text(size = 7),          # text, endrer all tekst
        axis.text = element_text(size = 5)) #+
  geom_text(data = count(personfil_0, vars = "arbeidsplass"), aes(x=1.8, y=5,  label=paste0("n = ",n)),
            inherit.aes=FALSE, parse = F)


ggsave(path = "RVUcorona_ggsave_output" ,"trip_arbeidsplass_facet.png", dpi = 300, units = "mm", width = 160, height = 80)



personfil_0 %>% 
  filter(!is.na(hjemmekontor)) %>% 
  ggplot(aes(group = hjemmekontor)) +
  geom_bar(aes(tellekategori, y = ..prop.., fill = hjemmekontor), position = "dodge", alpha = 0.8) +
  theme(legend.title = element_blank(),
        legend.position = c(0.8,0.7), plot.title = element_text(size=13)) +
  labs(x = "Number of trips in a day", y ="", 
       title = "Trip production by work arrangement") 

ggsave(path = "RVUcorona_ggsave_output" ,"trip_hjemmekontor_bar.png", dpi = 300, units = "mm", width = 160, height = 80)











personfil_0 %>% 
  filter(!is.na(arbeidstid)) %>%  
  ggplot(aes(x = reorder(tellekategori, desc(tellekategori)), group = arbeidstid)) +
  geom_bar(aes( y = ..prop..,fill = arbeidstid), alpha = 0.6, show.legend = F) +
  labs(title = "Number of trips in a day by work schedule", x = "", y = "") +
  scale_y_continuous(labels = scales::label_percent(accuracy = 1L)) +
  guides(fill=guide_legend(title=NULL))+
  coord_flip()+
  facet_wrap(~ arbeidstid) +
  theme(text = element_text(size = 7),          # text, endrer all tekst
        axis.text = element_text(size = 5)) #+
geom_text(data = count(personfil_0, vars = "arbeidstid"), aes(x=1.8, y=5,  label=paste0("n = ",n)),
          inherit.aes=FALSE, parse = F)


ggsave(path = "RVUcorona_ggsave_output" ,"trip_arbeidstid_facet.png", dpi = 300, units = "mm", width = 160, height = 50)


# density arbeidstid
personfil_0 %>% 
  filter(!is.na(arbeidstid)) %>%   # 
  ggplot() +
  geom_density(aes(antall_reiser, color = arbeidstid, linetype = arbeidstid), stat = "density",
               adjust = 2) +
  theme(legend.title = element_blank(),
        legend.position = c(0.8,0.7), plot.title = element_text(size=12),
        legend.text = element_text(size = 9),
        legend.key.size = unit(0.3, "cm" )) +
  labs(x = "Number of trips in a day", y ="", 
       title = "Density distribution by work schedules") 

ggsave(path = "RVUcorona_ggsave_output" ,"trip_arbeidstid_density.png", dpi = 300, units = "mm", width = 160, height = 60)




#boxplot arbeidstid
personfil_0 %>% 
  filter(!is.na(arbeidstid)) %>%
  group_by(arbeidstid) %>% 
  summarize(n = n(), antall_reiser = antall_reiser) %>% 
  ggplot() +
  geom_boxplot(aes(x = arbeidstid, antall_reiser)) +
  labs(y = "Number of trips in a day", x ="", 
       title = "Boxplot of trip production by work schedules") +
  geom_text(aes(arbeidstid, y = 8.0, label = paste0("n = ", n))) +
  coord_flip() 

ggsave(path = "RVUcorona_ggsave_output" ,"trip_arbeidstid_boxplot.png", dpi = 300, units = "mm", width = 160, height = 50)


# geom_bar arbeidstid

personfil_0 %>% 
  filter(!is.na(arbeidstid)) %>% 
  ggplot(aes(group = arbeidstid)) +
  geom_bar(aes(tellekategori, y = ..prop.., fill = arbeidstid), position = "dodge", alpha = 0.8) +
  theme(legend.title = element_blank(),
        legend.position = c(0.8,0.7), plot.title = element_text(size=13)) +
  labs(x = "Number of trips in a day", y ="", 
       title = "Trip production by work schedules") 

ggsave(path = "RVUcorona_ggsave_output" ,"trip_arbeidstid_bar.png", dpi = 300, units = "mm", width = 160, height = 80)







# Gjennomsnittlig antall reiser per kommune (med antall respondenter > 50)

personfil_0 %>% 
  group_by(Kommunenavn) %>% 
  summarise(n = n(), avg = mean(antall_reiser), sd = sd(antall_reiser, na.rm = T)) %>% 
  filter(n > 50, !is.na(Kommunenavn)) %>% 
  arrange(desc(avg))


personfil_0 %>% 
  group_by(Kommunenavn) %>% 
  filter(n() > 50, !is.na(Kommunenavn)) %>%
  ggplot() +
  geom_boxplot(aes( x = Kommunenavn, y = antall_reiser)) +
  labs(x = "Municipalities (N > 50)", y = "Average number of trips per person")
  
ggsave(path = "RVUcorona_ggsave_output" ,"trips_municipality_N50.png", width = 160, height = 100, units = "mm")




# boxplot. antall reiser per yrkesstatus  

personfil_0 %>% 
  filter(!is.na(yrke)) %>%
  group_by(yrke) %>%
  summarize(n = n(), antall_reiser = antall_reiser, avg = mean(antall_reiser)) %>% 
  mutate(yrke = fct_reorder(yrke, avg)) %>%
  ggplot() + 
  geom_boxplot(aes(x = reorder(yrke, avg), antall_reiser)) +
  labs(y = "Number of trips in a day", x = "Employment status")+
  coord_flip() +
  geom_text(aes(x = yrke, y = 7.5, label = paste0("n = ", n))) +
  ylim(0,8)
ggsave(path = "RVUcorona_ggsave_output" ,"trips_yrkesstatus_boxplot.png", width = 160, height = 100, units = "mm")

personfil_0 %>% 
  filter(!is.na(yrke)) %>%
  group_by(yrke) %>% 
  summarize(avg = mean(antall_reiser)) %>% 
  arrange(-avg)



# Transportmiddelbruk per yrkesstatus  

reisefil_0 %>% 
  filter(!is.na(reisemiddel), !is.na(yrke)) %>% 
  group_by(yrke) %>% 
  ggplot() +
  geom_density(aes(x = reisemiddel, group = yrke, color = yrke), stat= "density", position = "identity") +
  labs(x = "", y = "Density")+
  theme(legend.title = element_blank(), legend.position = c(0.8,0.6),
        axis.text.x = element_text(angle = 52
                                  , vjust = 0.8
                                  ))

reisefil_0 %>% 
  filter(!is.na(reisemiddel), !is.na(yrke)) %>% 
  ggplot() +
  geom_histogram(aes(reisemiddel, group= yrke, fill = yrke), stat= "count")






# Tidsrom for start på reiser ---------------------------------------------



tidsrom_start <- bind_rows(w_total,juni,juli) %>% 
  select(contains("Når på dagen")) %>% 
  mutate_all(funs((str_replace(., "Mellom", "")))) %>% 
  mutate_all(funs((str_replace(., " og ", "-")))) %>% 
  mutate_all(funs((str_replace(., "i dag", "today"))))

tidsrom_start_stack <- data.frame(stack(tidsrom_start),personfil_0) %>% 
  rename(start_time = values)



tidsrom_hjem <-  bind_rows(w_total,juni,juli) %>% 
  select(contains("Når kom du hjem")) %>% 
  mutate_all(funs((str_replace(., "Mellom", "")))) %>% 
  mutate_all(funs((str_replace(., " og ", "-")))) %>% 
  mutate_all(funs((str_replace(., "i dag", "today"))))

tidsrom_hjem_stack <- data.frame(stack(tidsrom_hjem),personfil_0) %>% 
  rename( home_time = values)


tidsrom <- cbind(tidsrom_start_stack, home_time = tidsrom_hjem_stack$home_time) %>% 
  select(start_time, home_time, everything())
  


# diagrams for start/end of trip tours (one person may have several tours in a day)

tidsrom %>% 
  filter(!is.na(start_time)) %>%   # hvis is.na(start_time), så is.na(home_time)
  ggplot() +
  geom_bar( aes(x = start_time, y = (..count..)/sum(..count..), fill = "Start of tour"), alpha = 0.4) +
  geom_bar( aes(x = home_time, y = (..count..)/sum(..count..), fill = "End of tour"), alpha = 0.3) +
  ylab("Density") + xlab("") +
  labs(title = "Time of day when starting/ending a trip tour"
  ) + #Time of day when leaving home
  theme(legend.title = element_blank(), legend.position = c(0.45,0.8),
        axis.text.x = element_text(size = 7, angle = 65, vjust = 0.8)) +
  scale_fill_manual("Density", values = c("indianred2",  "darkseagreen4"),
                      guide = guide_legend(reverse = TRUE))

ggsave(path = "RVUcorona_ggsave_output" ,"timeperiod_histogram.png", width = 160, height = 85, units = "mm")


  

tours <- tidsrom %>% 
  filter(!is.na(start_time)) %>% 
  group_by(start_time, home_time) %>% 
  summarize( n = n()) %>% 
  mutate(tour_start_end = paste0( str_extract(start_time, '^......') , "-", str_extract(home_time, '.....$')),
         prosent = 100*n/3186
  ) %>% 
  arrange(., desc(n))

# tours %>% 
#   filter(n > 50) %>% 
#   ggplot() +
#   geom_col(aes(reorder(tour_start_end, desc(tour_start_end)), n)) +
#   coord_flip()
# 
# 
# table(tidsrom$start_time)
# tours %>% 
#   filter(start_time %in% c(" 07:00-08:00", " 17:00-18:00", " 18:00-19:00", " 19:00-20:00", " 20:00-22:00" )) %>% 
#   filter(home_time %in% c(" 15:00-16:00", " 16:00-17:00", " 17:00-18:00 ", " 20:00-22:00" )) 
# 






# 
# # histograms/bars, telecommuting
# tidsrom %>% 
#   filter(!is.na(hjemmekontor), !is.na(start_time)) %>% 
#   ggplot(aes(start_time, fill = hjemmekontor, group = hjemmekontor)) +
#   geom_bar(aes(y = (..count..)/sum(..count..)), alpha = 0.4, position = "dodge")+
#   ylab("Density") + xlab("Time period") +
#   labs(title = "Time of day when starting a trip"
#   ) + #Time of day when leaving home
#   theme(legend.title = element_blank(), legend.position = c(0.75,0.5),
#         axis.text.x = element_text(angle = 65, vjust = 0.8))
# ggsave(path = "RVUcorona_ggsave_output" ,"timeperiod_start_histogram.png", width = 160, height = 85, units = "mm")




-------

# density start_time, telecommuting 
tidsrom %>% 
  filter(!is.na(hjemmekontor), !is.na(start_time)) %>% 
  ggplot(aes(start_time, color = hjemmekontor , group = hjemmekontor)) +
  geom_density(stat = "density") +
  ylab("Density") + xlab("") +
  labs(title = "Time of day when starting a trip tour by work arrangement"
  ) + #Time of day when leaving home
  theme(legend.title = element_blank(), legend.position = c(0.5,0.8), 
        axis.text.x = element_text(size = 7, angle = 65, vjust = 0.8), 
        legend.background = element_rect(alpha(0.8)), legend.text = element_text(size = 9),
        legend.key.size = unit(0.5, "cm" ))
ggsave(path = "RVUcorona_ggsave_output" ,"timeperiod_start_hjemmekontor_density.png", width = 160, height = 85, units = "mm")


# density home_time, telecommuting 
tidsrom %>% 
  filter(!is.na(hjemmekontor), !is.na(home_time)) %>% 
  ggplot(aes(home_time, color = hjemmekontor , group = hjemmekontor)) +
  geom_density(stat = "density") +
  ylab("Density") + xlab("") +
  labs(title = "Time of day when ending a trip tour by work arrangement"
  ) + #Time of day when leaving home
  theme(legend.title = element_blank(), legend.position = c(0.45,0.8), 
        axis.text.x = element_text(size = 7, angle = 65, vjust = 0.8), 
        legend.background = element_rect(alpha(0.8)), legend.text = element_text(size = 9),
        legend.key.size = unit(0.5, "cm" ))
ggsave(path = "RVUcorona_ggsave_output" ,"timeperiod_home_hjemmekontor_density.png", width = 160, height = 85, units = "mm")


-------------------



















# reisetid ----------------------------------------------------------------
?quantile
quantile(reisefil_0$reisetid, probs = seq(0,1,0.025), na.rm = T)

reisefil_0 %>% 
  filter(!is.na(reisetid)) %>% 
  group_by(formål) %>% 
  summarize(n = n(), reisetid = reisetid) %>% 
 # filter( n > 200) %>% 
  ggplot(aes(reisetid)) +
  geom_density(aes( color = formål, linetype = formål), stat = "density", size = 1.2, adjust = 1.5) +
  xlim(0,95) +   # dekker 95% av alle reisene
  labs(x="Travel time in minutes per trip", y ="") +
  

ggsave(path = "RVUcorona_ggsave_output" ,"reisetid_formål_density.png", width = 160, height = 85, units = "mm")


# reisefil_0 %>% 
#   filter( !is.na(formål)) %>% 
#   ggplot() +
#   geom_bar(aes(formål, fill = yrke), position = "fill", stat = "count") + 
#   coord_flip()





reisefil_0 %>% 
  filter(!is.na(reisetid)) %>% 
  group_by(yrke) %>% 
  summarize(n = n(), reisetid = reisetid) %>% 
  # filter( n > 200) %>% 
  ggplot(aes(reisetid)) +
  geom_density(aes( color = formål, linetype = formål), stat = "density", size = 1.2, adjust = 1.5) +
  xlim(0,95) +   # dekker 95% av alle reisene
  labs(x="Travel time in minutes per trip", y ="")



reisefil_0 %>% 
  filter(!is.na(reisetid), !is.na(yrke) ) %>% 
  group_by(yrke) %>% 
  summarize(n = n(), reisetid = reisetid) %>% 
  ggplot() +
  geom_boxplot(aes( x = reorder(yrke, reisetid, FUN = median), y = reisetid)) +
  ylim(0,63)+
   # dekker 95% av alle reisene
  labs(y="Travel time in minutes per trip", x ="Employment status") +
  geom_text(aes(x = yrke, y = 38, label = paste0("n = ", n)), size = 3.5) +
  coord_flip()

ggsave(path = "RVUcorona_ggsave_output" ,"reisetid_yrkestatus_boxplot.png", width = 160, height = 50, units = "mm")






# kvantiler for reisetid (tid brukt per reise)
quantile(reisefil_0$reisetid, na.rm = T)

reisefil_0 %>%
  select(reisetid) %>% 
  filter(!is.na(reisetid)) %>% 
  count(reisetid) %>% 
  arrange(reisetid) %>% 
  mutate(per = prop.table(n), cumul = cumsum(per)) %>% 
  ggplot() +
  geom_point(aes(reisetid,cumul)) +
  scale_x_continuous(limits = c(0,91),breaks = seq(0,91,5)) +
  scale_y_continuous(labels =scales::percent)

ggsave(path = "RVUcorona_ggsave_output" ,"kumulativ_reisetid.png", dpi = 300, units = "mm", width = 160, height = 110)



reisefil_0 %>%
  select(reisetid) %>% 
  filter(!is.na(reisetid)) %>% 
  count(reisetid) %>% 
  arrange(reisetid, desc(.))

840/60

# reisetid weekend/weekday
reisefil_0 %>% 
  group_by(NR) %>% 
  summarize(gjtid = mean(reisetid, na.rm = T)) %>% 
  ggplot(aes(x = gjtid)) +
  geom_freqpoly(aes(color = hverdag, y= (..count..)/sum(..count..)),
                binwidth = 15, size = 0.9) +
  xlab("Total travel time per person per day [minutes]") + 
  ylab("") +
  coord_cartesian(xlim = c(0, 250)) +
  scale_y_continuous(labels = scales::percent) +
  guides(color=guide_legend(title=NULL))


## Reisetid per kjønn. nøkkeltall, frekvensdiagram, samt kumulativt. INGEN FORSKJELL

personfil %>% 
  group_by(kjønn) %>% 
  summarize(mean(tottid), mean(meantid, na.rm = T), mean(antall_reiser), n())

personfil_0 %>% 
  filter( meantid > 0, kjønn != "Them") %>% 
  ggplot(aes(x = meantid , fill= kjønn)) +
  geom_histogram(aes(y = 0.5*..density..),
                 position = 'identity',
                 binwidth= 15, size = 0.9, alpha = 0.3) +
  scale_x_continuous(limits = c(0,180), breaks = seq(0,180,15)) +
  guides(fill=guide_legend(title=NULL)) +
  xlab("Mean travel time per trip [minutes]") +
  ylab("Density")

ggsave(path = "RVUcorona_ggsave_output" ,"meantid_kjønn.png", dpi = 300, units = "mm", width = 160, height = 120)

personfil_0 %>% 
  filter( meantid > 0, kjønn != "Them") %>% 
  ggplot(aes(x = tottid , fill= kjønn)) +
  geom_histogram(aes(y = 0.5*..density..),
                 position = 'identity',
                 binwidth= 15, size = 0.9, alpha = 0.3) +
  scale_x_continuous(limits = c(0,270), breaks = seq(0,270,15)) +
  guides(fill=guide_legend(title=NULL)) +
  xlab("Total travel time per person per day [minutes]") +
  ylab("Density")

ggsave(path = "RVUcorona_ggsave_output" ,"tottid_kjønn.png", dpi = 300, units = "mm", width = 160, height = 120)





# bins etter RVU:

personfil_0 %>% 
  filter( meantid > 0) %>% 
  ggplot(aes(x = meantid)) +
  geom_line(aes(y = ..density.., color = alderskategori, linetype = alderskategori), 
            stat = 'density', size = 0.8) + 
  # geom_histogram(aes(y = ..density..))+
  scale_x_continuous(limits = c(0,150), breaks = seq(0,150,15)) +
  xlab("Mean travel time per trip [minutes]") +
  ylab("Density")+
  labs(color  = "Age", linetype = "Age")

ggsave(path = "RVUcorona_ggsave_output" ,"meantid_alderskat.png", dpi = 300, units = "mm", width = 160, height = 80)

personfil_0 %>% 
  filter( tottid > 0) %>% 
  ggplot(aes(x = tottid)) +
  geom_line(aes(y = ..density.., color = alderskategori, linetype = alderskategori), 
            stat = 'density', size = 0.8) + 
  # geom_histogram(aes(y = ..density..))+
  scale_x_continuous(limits = c(0,270), breaks = seq(0,270,30)) +
  xlab("Total travel time per person [minutes]") + 
  ylab("Density")+
  labs(color  = "Age", linetype = "Age")

ggsave(path = "RVUcorona_ggsave_output" ,"tottid_alderskat.png", dpi = 300, units = "mm", width = 160, height = 80)



personfil_0 %>% 
  filter( meantid > 0) %>% 
  ggplot(aes(x = meantid)) + 
  geom_line(aes(y = ..density.., color = husholdning, linetype = husholdning), 
            stat = 'density', size = 0.6) + 
  # geom_histogram(aes(y = ..density..))+
  scale_x_continuous(limits = c(0,150), breaks = seq(0,150,15)) +
  xlab("Total travel time per person [minutes]") + 
  ylab("Density")+
  labs(color  = "Household type", linetype = "Household type")

ggsave(path = "RVUcorona_ggsave_output" ,"meantid_household.png", dpi = 300, units = "mm", width = 160, height = 120)


personfil_0 %>% 
  filter( tottid > 0) %>% 
  ggplot(aes(x = tottid)) +
  geom_line(aes(y = ..density.., color = husholdning, linetype = husholdning), 
            stat = 'density', size = 0.6) + 
  # geom_histogram(aes(y = ..density..))+
  scale_x_continuous(limits = c(0,270), breaks = seq(0,270,30)) +
  xlab("Total travel time per person [minutes]") + 
  ylab("Density")+
  labs(color  = "Household type", linetype = "Household type")

ggsave(path = "RVUcorona_ggsave_output" ,"tottid_household.png", dpi = 300, units = "mm", width = 160, height = 120)








# meantid, tottid, antall barn i husstand

personfil %>% 
  filter( meantid > 0) %>% 
  mutate(barn = as.character(barn)) %>% 
  ggplot(aes(x = meantid)) + 
  geom_line(aes(y = ..density.., color = barn, linetype = barn), 
            stat = 'density', size = 0.6) + 
  # geom_histogram(aes(y = ..density..))+
  scale_x_continuous(limits = c(0,150), breaks = seq(0,150,15)) +
  xlab("Total travel time per person [minutes]") + 
  ylab("Density")+
  labs(color  = "Children in household",
       linetype = "Children in household")

ggsave(path = "RVUcorona_ggsave_output" ,"meantid_barn.png", dpi = 300, units = "mm", width = 160, height = 120)


w_total %>% 
  filter( tottid > 0) %>% 
  mutate(barn = as.character(barn)) %>% 
  ggplot(aes(x = tottid)) +
  geom_line(aes(y = ..density.., color = barn, linetype = barn), 
            stat = 'density', size = 0.8) + 
  # geom_histogram(aes(y = ..density..))+
  scale_x_continuous(limits = c(0,270), breaks = seq(0,270,30)) +
  xlab("Total travel time per person [minutes]") + 
  ylab("Density")+
  labs(color  = "Children in household",
       linetype = "Children in household")

ggsave(path = "RVUcorona_ggsave_output" ,"tottid_barn.png", dpi = 300, units = "mm", width = 160, height = 120)


# meantid, tottid, yrke

w_total %>% 
  filter( meantid > 0) %>% 
  ggplot(aes(x = meantid)) + 
  geom_line(aes(y = ..density.., color = yrke, linetype = yrke), 
            stat = 'density', size = 0.8) + 
  # geom_histogram(aes(y = ..density..))+
  scale_x_continuous(limits = c(0,150), breaks = seq(0,150,15)) +
  xlab("Total travel time per person [minutes]") + 
  ylab("Density")+
  labs(color  = "Yrkesstatus", linetype = "Yrkesstatus")

ggsave(path = "RVUcorona_ggsave_output" ,"meantid_yrkestatus.png", dpi = 300, units = "mm", width = 160, height = 120)


w_total %>% 
  filter( tottid > 0) %>% 
  ggplot(aes(x = tottid)) +
  geom_line(aes(y = ..density.., color = yrke, linetype = yrke), 
            stat = 'density', size = 0.8) + 
  # geom_histogram(aes(y = ..density..))+
  scale_x_continuous(limits = c(0,270), breaks = seq(0,270,30)) +
  xlab("Total travel time per person [minutes]") + 
  ylab("Density")+
  labs(color  = "Yrkesstatus", linetype = "Yrkesstatus")

ggsave(path = "RVUcorona_ggsave_output" ,"tottid_yrkestatus.png", dpi = 300, units = "mm", width = 160, height = 120)




# meantid, tottid, arbeidsplass

w_total %>% 
  filter( meantid > 0, !is.na(arbeidsplass)) %>%
  group_by(arbeidsplass) %>% 
  filter(n() >= 10) %>% 
  ungroup() %>% 
  ggplot(aes(x = meantid)) + 
  geom_line(aes(y = ..density.., color = arbeidsplass, linetype = arbeidsplass), 
            stat = 'density', size = 0.6) + 
  scale_x_continuous(limits = c(0,150), breaks = seq(0,150,15)) +
  xlab("Total travel time per person [minutes]") + 
  ylab("Density")+
  labs(color  = "Arbeidsplass (n > 9)", linetype = "Arbeidsplass (n > 9)")

ggsave(path = "RVUcorona_ggsave_output" ,"meantid_arbeidsplass.png", dpi = 300, units = "mm", width = 160, height = 80)


w_total %>% 
  filter( tottid > 0, !is.na(arbeidsplass)) %>%
  group_by(arbeidsplass) %>% 
  filter(n() >= 10) %>% 
  ungroup() %>% 
  ggplot(aes(x = tottid)) +
  geom_line(aes(y = ..density.., color = arbeidsplass, linetype = arbeidsplass), 
            stat = 'density', size = 0.7) + 
  scale_x_continuous(limits = c(0,270), breaks = seq(0,270,30)) +
  xlab("Total travel time per person [minutes]") + 
  ylab("Density")+
  labs(color  = "Arbeidsplass", linetype = "Arbeidsplass")

ggsave(path = "RVUcorona_ggsave_output" ,"tottid_arbeidsplass.png", dpi = 300, units = "mm", width = 160, height = 100)






# Formål (as either x or y-axis) ------------------------------------------------------------------




# alder og formål

reisefil %>% 
  filter(!is.na(alderskategori)) %>% # kan ikke filtrere for !is.na(formål), da mister vi de som ikke reiste. Gir da skjevt gj.antall turer
  group_by(alderskategori) %>% 
  mutate(avg_trips = mean(antall_reiser)) %>% 
  filter(!is.na(formål)) %>% 
  mutate(n_alder = n()) %>% 
  group_by(alderskategori, formål) %>% 
  summarise(n_alder, n(), prosent = n()/n_alder, n_rel = avg_trips*prosent, avg_trips) %>% 
  distinct() %>% 
  
  ggplot(aes(y = reorder(alderskategori, desc(alderskategori)))) +
  geom_col(aes(x = n_rel, fill = formål), position = position_stack(reverse = TRUE)) +
  geom_text(aes(x = avg_trips, label = paste0("x = ", round(avg_trips, digits = 2))), 
            size = 2, 
            position=position_dodge(width=0.9), hjust = -0.3) +
  geom_text(aes( x = n_rel, label = scales::percent(prosent, accuracy = 1L)), 
            position = position_stack( reverse = T, vjust = 0.5), size = 1.5) +
  
  theme(title = element_text(size = 5.5),
        legend.title = element_blank(), 
        axis.title = element_text(size = 6), 
        axis.text = element_text(size = 5),
        legend.position = "top",
        legend.key.size = unit(4, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 6)
  ) +
  labs( x = "Average number of trips per person per day", y = "", title = "") +
  scale_fill_brewer(palette = "Spectral", direction = 1) +
  scale_x_continuous(breaks = seq(0,3,0.5), limits = c(0,3.1))

ggsave(path = "RVUcorona_ggsave_output" ,"purpose_age.png", width = 160, height = 55, units = "mm")
  
install.packages("ggrepel")
library(ggrepel)

reisefil %>% 
  filter(!is.na(formål), !is.na(reisemiddel)) %>% # kan ikke filtrere for !is.na(formål), da mister vi de som ikke reiste. Gir da skjevt gj.antall turer
  mutate(n_reiser = nrow(.)) %>% 
  group_by(formål) %>% 
  mutate(n_formål = n(), perc = n_formål/n_reiser, n_formål_rel = perc*mean(personfil$antall_reiser)) %>% 
  group_by(formål, reisemiddel) %>% 
  summarise(n_formål, prosent = n()/n_formål, n_rel = n_formål_rel*prosent, n_formål_rel) %>% 
  distinct() %>% 
  
  ggplot(aes(y = reorder(formål, desc(formål)))) +
  geom_col(aes(x = n_rel, fill = reisemiddel), position = position_stack(reverse = TRUE)) +
  geom_text(aes(x = n_formål_rel, label = paste0("x = ", round(n_formål_rel, digits = 2))), 
            size = 2, 
            position=position_dodge(width=0.9), hjust = -0.3) +
  geom_text(aes( x = n_rel, label = scales::percent(prosent, accuracy = 1L)), 
            position = position_stack( reverse = T, vjust = 0.5), size = 1.5) +
  
  theme(title = element_text(size = 5.5),
        legend.title = element_blank(), 
        axis.title = element_text(size = 6), 
        axis.text = element_text(size = 5),
        legend.position = "top",
        legend.key.size = unit(4, "mm"), 
        legend.background = element_rect(fill = NA), 
        legend.text = element_text(size = 5)
  ) +
  labs( x = "Average number of trips per person per day", y = "", title = "") +
  scale_fill_brewer(palette = "Spectral", direction = 1) +
  scale_x_continuous(breaks = seq(0,3,0.1), limits = c(0,0.67))

ggsave(path = "RVUcorona_ggsave_output" ,"purpose_mode.png", width = 160, height = 60, units = "mm")

?position_stack
position_




## tellekategori

addWorksheet(excelRVU, "tellekat")

personfil %>% 
  count(tellekategori) %>% 
  pivot_wider(., names_from = tellekategori, values_from = n) %>% 
  mutate(n = rowSums(., na.rm = T)) %>% 
  select(n, everything()) %>% 
  mutate(.[,-1]*100/n) %>% 
  mutate(round(.[,-1], digits = 0)) %>% 
  write(excelRVU, "tellekat", .)




# demografisk tabell + SSB --------------------------------------------------------------



navn <- c("X", "Sample size","Percentage", "Travel time per trip [minutes]", 
          "Travel time per day [minutes]", "Mean number of trips per day")


x_N_1 <- personfil_0 %>% 
  summarize(NA,  n = n() , 100*n/nrow(personfil_0), mean(meantid, na.rm = T),   mean(tottid), mean(antall_reiser) ) %>% 
  setNames(., navn)

x_kjønn_2 <- personfil_0 %>% 
  group_by(kjønn) %>% 
  summarize( n = n() , 100*n/nrow(personfil_0), mean(meantid, na.rm = T),   mean(tottid), mean(antall_reiser) )%>% 
  setNames(., navn)

x_alderskategori_3 <- personfil_0 %>% 
  filter(!is.na(alderskategori)) %>% 
  group_by(alderskategori) %>% 
  summarize( n = n() , 100*n/nrow(personfil_0),mean(meantid, na.rm = T),   mean(tottid), mean(antall_reiser) )%>% 
  setNames(., navn)

x_husholdning_4 <- personfil_0 %>% 
  filter(!is.na(husholdning)) %>% 
  mutate(husholdning = case_when(
    str_detect(husholdning, "Sev|Single w/o") ~ "Several adults / Single w/o children",
    str_detect(husholdning, "Sev|Single w/o") ~ "Several adults / Single w/o children",
    T ~ husholdning
  )) %>% 
  group_by(husholdning) %>% 
  summarize( n = n() , 100*n/nrow(personfil_0),mean(meantid, na.rm = T),   mean(tottid), mean(antall_reiser) )%>% 
  setNames(., navn)

x_arbeidstid_6 <- personfil_0 %>% 
  select(arbeidstid, meantid, tottid, antall_reiser) %>% 
  mutate(arbeidstid = case_when(
    str_detect(arbeidstid, "Fle") ~ "Standard Business Day",
    T ~ arbeidstid
  )) %>% 
  filter(!is.na(arbeidstid)) %>% 
  group_by(arbeidstid) %>% 
  summarize( n = n(), total = sum(!is.na(personfil_0$arbeidstid)), 100*n/total,
             mean(meantid, na.rm = T),   mean(tottid), mean(antall_reiser) )%>% 
  select(-3) %>% 
  setNames(., navn)

x_yrkesstatus_5 <- personfil_0 %>% 
  filter(!is.na(yrke)) %>% 
  group_by(yrke) %>% 
  summarize( n = n() , 100*n/nrow(personfil_0),mean(meantid, na.rm = T),   mean(tottid), mean(antall_reiser) )%>% 
  setNames(., navn)

x_arbeidsplass_7 <- personfil_0 %>% 
  filter(!is.na(arbeidsplass)) %>% 
  group_by(arbeidsplass) %>% 
  summarize( n = n(), total = sum(!is.na(personfil_0$arbeidsplass)), 100*n/total,
             mean(meantid, na.rm = T),   mean(tottid), mean(antall_reiser) )%>% 
  select(-3) %>% 
  setNames(., navn)

x_antallbarn_8 <- personfil_0 %>% 
  group_by(barn) %>% 
  summarize( n = n() ,100*n/nrow(personfil_0),  mean(meantid, na.rm = T),   mean(tottid), mean(antall_reiser) )%>% 
  setNames(., navn) 

x_hjemmekontor_9 <- personfil_0 %>% 
  filter(!is.na(hjemmekontor)) %>% 
  group_by(hjemmekontor) %>% 
  summarize( n = n() , total= sum(!is.na(personfil_0$hjemmekontor)),  100*n/total, mean(meantid, na.rm = T),
             mean(tottid), mean(antall_reiser) )%>% 
  select(-3) %>%  
   setNames(., navn)


x_kommunenavn_10 <- personfil_0 %>% 
  filter(!is.na(Kommunenavn)) %>% 
  group_by(Kommunenavn) %>% 
  summarize( n = n() , 100*n/nrow(personfil_0), mean(meantid, na.rm = T),   mean(tottid), mean(antall_reiser) )%>% 
  setNames(., navn)



ssb2 <- c(NA, NA, "50%", "50%", NA, NA)  # kjønn
ssb3 <- c("4%", "9%", "14%", "13%","14%","14%","8%","8%", NA)   # aldersfordelign
ssb4 <- c("20%", "24%", "50%", "4%", NA)   # husholdningstype
ssb5 <- c(NA, "53%", "6%", NA, NA, "17%", "17%", "6%", NA)   # yrkesstatus
ssb6 <- c("9%", "24%", "68%", NA)   # arbeidstid (SBD, shift, different schedule)
ssb7 <- c(NA, "5%", "3%", "17%","58%",NA, "18%", NA)   # arbeidsplass
ssb8 <- c("88%", "5%", "5%","2%", "0.3%", NA)   # antall barn
ssb9 <- c(NA, NA, NA, NA)
ssb10 <- rep(NA, nrow(x_kommunenavn_10))

ssb <- c(ssb2, ssb3,ssb4, ssb5, ssb6, ssb7, ssb8, ssb9,ssb10)

 empty <- rep(NA,6)
 

x_megatabell <- rbind(x_N_1, empty, x_kjønn_2, empty, x_alderskategori_3, empty,
                      x_husholdning_4, empty, x_yrkesstatus_5,
                    empty, x_arbeidstid_6, empty, x_arbeidsplass_7, empty,
                    x_antallbarn_8, empty, x_hjemmekontor_9  ,empty, x_kommunenavn_10) %>%    
  mutate(round(.[3], digits = 0),
         round(.[4:5], digits = 0),
         round(.[6], digits = 2),
         Percentage = paste0(Percentage,"%"),
         Percentage = case_when(
           Percentage == "NA%" ~ NA_character_,
           T ~ Percentage
         )) %>% 
  cbind(ssb) %>% 
  select(X, ssb, Percentage, everything()) %>% 
  setNames(c("X", "Population",	"Percentage sample", "Sample size", "Travel time per trip [minutes]", 
             "Travel time per day [minutes]", "Mean number of trips per day"
))



# løsning nr1
# addWorksheet(excelRVU, "x_mega")
# megatabell %>% 
#   write(excelRVU, "x_mega", .)

# løsning nr2
x_megatabell %>% 
  write.xlsx2(., "excel_coronaRVU.xlsx", sheetName="Sheet1",
              col.names=TRUE, row.names=TRUE, append=FALSE)











addWorksheet(excelRVU, "formål")
as.data.frame(table(unlist(formaal_50))) %>% 
  setNames(., c("Formål", "Antall")) %>% 
  mutate(percent = Antall/sum(Antall)) %>% 
  mutate(percent = round(percent, digits = 2)) %>% 
  arrange(desc(percent)) %>% 
  write(excelRVU, "formål", .) 







# REISEMIDDEL -------------------------------------------------------------

reisefil

# reisefil %>% 
#   filter(!is.na(reisemiddel), alder > 14) %>% 
#   group_by(reisemiddel) %>% 
#   ggplot(aes(alder, color = reisemiddel, linetype = reisemiddel)) +
#   geom_density(stat = "density", show.legend = T, size = 1) +
#   scale_x_continuous(limits = c(10,80), breaks = seq(10,80,5)) +
#   theme(legend.title = element_blank(),
#         legend.position = c(0.8,0.6)) 
# 
# ggsave(path = "RVUcorona_ggsave_output" ,"reisemiddel_age.png", dpi = 300, units = "mm", width = 200, height = 120)

reisefil %>% 
  filter(!is.na(reisemiddel)) %>% 
  group_by(reisemiddel) %>% 
  ggplot(aes(alder, color = reisemiddel)) +
  geom_density(stat = "density", show.legend = F) +
  scale_x_continuous(limits = c(10,80), breaks = seq(10,80,5)) +
  theme(legend.title = element_blank(),
        legend.position = c(0.8,0.6)) +
  facet_wrap(~ reisemiddel)
ggsave(path = "RVUcorona_ggsave_output" ,"reisemiddel_age_facet.png", dpi = 300, units = "mm", width = 200, height = 120)




# 100% over reisemidlene
p_reisemiddel_tids <- reisefil_0 %>% 
  filter(!is.na(reisemiddel)) %>% 
  count(reisemiddel, tidskategori) %>% 
  pivot_wider(., names_from = tidskategori, values_from = n) %>% 
  mutate(n = rowSums(.[,-1], na.rm = T)) %>% 
  mutate(.[,-c(1,ncol(.))]*100/n) %>% 
  mutate(round(.[,-1], digits = 0)) %>% 
  select(-"NA")

addWorksheet(excelRVU, "reisemiddel")
p_reisemiddel %>% 
  replace(is.na(.), 0) %>% 
  write(excelRVU, "reisemiddel",.)



# test
p_reisemiddel_tids %>% 
  rowSums(noe = .[,-c(1, ncol(.))], na.rm =T)

library(RColorBrewer)
RColorBrewer::display.brewer.all()

# Lage ny prosent-funksjon som ikke skalerer med 100.
scale1_percent <- scales::label_percent(
  scale = 1
)

p_reisemiddel_tids %>% 
  select(-n) %>% 
  pivot_longer(!reisemiddel, names_to = "tidskategori", values_to = "prosentandel") %>% 
  mutate(tidskategori = fct_relevel(tidskategori, tidskategori_levels
                                    )) %>% 
  ggplot(aes(x = reisemiddel, y = prosentandel, fill = tidskategori, label = prosentandel)) +
  geom_col() +
  xlab("") + ylab("") +
  scale_y_continuous(labels = scale1_percent) +
  geom_text(size = 3, position = position_stack(vjust = 0.5)) +
  coord_flip() +
  theme(legend.title = element_blank()) +
  scale_fill_brewer(palette = "Blues") 

ggsave(path = "RVUcorona_ggsave_output" ,"mode_tidskat.png", dpi = 300, units = "mm", width = 160, height = 80)



# 100% over tidskategoriene

addWorksheet(excelRVU, "tidskategori_reise")
p_tidskategori <- reisefil_0 %>% 
  filter(!is.na(reisemiddel), !is.na(tidskategori)) %>% 
  count(reisemiddel, tidskategori) %>% 
  pivot_wider(., names_from = reisemiddel, values_from = n) %>% 
  mutate(n = rowSums(.[,-1], na.rm = T)) %>% 
  mutate(.[,-c(1,ncol(.))]*100/n) %>% 
  mutate(round(.[,-1], digits = 0))

p_tidskategori %>% 
  write(excelRVU, "tidskategori_reise",.)



# p_tidskategori %>% 
#   replace(is.na(.), 0) %>% 
#   mutate(round(.[,-1], digits = 0))




p_tidskategori %>% 
  select(-n) %>% 
  pivot_longer(!tidskategori, names_to = "reisemiddel", values_to = "prosentandel") %>% 
  mutate(tidskategori = fct_relevel(tidskategori, tidskategori_levels)) %>% 
  ggplot(aes(x = tidskategori, y = prosentandel, fill = reisemiddel, label = prosentandel)) +
  geom_col() +
  xlab("") + ylab("") + 
  scale_y_continuous(labels = scale1_percent) +
  geom_text(size = 3, position = position_stack(vjust = 0.5)) +
  coord_flip() +
  theme(legend.title = element_blank()) 
  #scale_fill_brewer(palette = "Blues")

ggsave(path = "RVUcorona_ggsave_output" ,"p_tidskat.png", dpi = 300, units = "mm", width = 160, height = 80)



# reisemidler og alder

p_reisemiddel_alder <- reisefil_0 %>% 
  filter(!is.na(reisemiddel), !is.na(alderskategori),
         reisemiddel != "Ferry", reisemiddel != "By plane") %>% 
  count(reisemiddel, alderskategori) %>% 
  pivot_wider(., names_from = reisemiddel, values_from = n) %>% 
  mutate(n = rowSums(.[,-1], na.rm = T)) %>% 
  mutate(.[,-c(1,ncol(.))]*100/n) %>% 
  mutate(round(.[,-1], digits = 0))



p_reisemiddel_alder %>% 
  select(-n) %>% 
  pivot_longer(!alderskategori, names_to = "reisemiddel", values_to = "prosentandel") %>% 
  ggplot(aes(x = reorder(alderskategori, desc(alderskategori)), y = prosentandel, fill = reisemiddel, label = prosentandel)) +
  geom_col() +
  xlab("") + ylab("") +
  scale_y_continuous(labels = scale1_percent) +
  geom_text(size = 3, position = position_stack(vjust = 0.5)) +
  coord_flip() +
  theme(legend.title = element_blank()) 

ggsave(path = "RVUcorona_ggsave_output" ,"reisemiddek_alderskat.png", dpi = 300, units = "mm", width = 160, height = 80)



# reisemidler og reiseformål

p_reisemiddel_formål <- reisefil_0 %>% 
  filter(!is.na(reisemiddel), !is.na(formål),
         reisemiddel != "Ferry", reisemiddel != "By plane") %>% 
  count(reisemiddel, formål) %>% 
  pivot_wider(., names_from = reisemiddel, values_from = n) %>% 
  mutate(n = rowSums(.[,-1], na.rm = T)) %>% 
  mutate(.[,-c(1,ncol(.))]*100/n) %>% 
  mutate(round(.[,-1], digits = 0))



p_reisemiddel_formål %>% 
  select(-n) %>% 
  pivot_longer(!formål, names_to = "reisemiddel", values_to = "prosentandel") %>% 
  ggplot(aes(x = reorder(formål, desc(formål)), y = prosentandel, fill = reisemiddel, label = prosentandel)) +
  geom_col() +
  xlab("") + ylab("") +
  scale_y_continuous(labels = scale1_percent) +
  geom_text(size = 3, position = position_stack(vjust = 0.5)) +
  coord_flip() +
  theme(legend.title = element_blank()) 

ggsave(path = "RVUcorona_ggsave_output" ,"reisemiddel_formål_bar.png", dpi = 300, units = "mm", width = 160, height = 80)



hex <- reisefil_0 %>% 
  filter(!is.na(reisemiddel)) %>% 
  group_by(hjemmekontor, reisemiddel) %>% 
  summarize(n = n()) %>% 
  pivot_wider(., values_from = n, names_from = reisemiddel) %>% 
  as.data.frame()

hex %>% 
  write.xlsx2(., "excel_coronaRVU.xlsx", sheetName="Sheet1",
              col.names=TRUE, row.names=TRUE, append=FALSE)


bex <- reisefil_0 %>% 
  filter(!is.na(reisemiddel), reisemiddel != "By plane",  reisemiddel !="Ferry")  %>% 
  group_by(barn, reisemiddel) %>% 
  summarize(n = n()) %>% 
  pivot_wider(., values_from = n, names_from = reisemiddel) %>% 
  as.data.frame()

bex %>% 
  write.xlsx2(., "excel_coronaRVU.xlsx", sheetName="Sheet1",
              col.names=TRUE, row.names=TRUE, append=FALSE)


#fredrik

reisefil_0 %>% 
  filter(!is.na(alderskategori)) %>% 
  filter( reisemiddel != "By plane",  reisemiddel !="Ferry") %>%
  mutate(reisemiddel = as_factor(reisemiddel)) %>% 
  group_by(alderskategori, reisemiddel) %>%
  summarise(gj = mean(antall_reiser, na.rm = T)) %>% 
  complete(reisemiddel, fill = list(gj = 0)) %>% 
  left_join(per_aldersgruppe) %>% 
  ggplot(aes(reorder(alderskategori, desc(alderskategori)), antall_reiser_per_aldersgruppe / 8)) +
  geom_col(aes(fill = reisemiddel, group = alderskategori)) +
  coord_flip() +
  labs(x = "Age group", y = "Average number of trips in a day") +
  theme(legend.title = element_blank())

# nesten fredrik
reisefil_0 %>% 
  filter(!is.na(alderskategori)) %>% 
  filter( reisemiddel != "By plane",  reisemiddel !="Ferry") %>%
  # group_by(alderskategori, reisemiddel) %>% 
  # summarize(n = n(), p = n(sum))
  ggplot() +
  geom_bar(aes(alderskategori, fill = reisemiddel), position = "fill", stat = "count")





reisefil_0 %>% 
  filter(!is.na(reisemiddel)) %>% 
  group_by(student, reisemiddel) %>% 
  summarize(n = n()) %>% 
  filter(reisemiddel != "Ferry", reisemiddel != "By plane") %>% 
  pivot_wider(., values_from = n, names_from = student) %>% 
  mutate( perc_ns = `Not student`/sum(`Not student`, na.rm = T), perc_s = Student/sum(Student, na.rm = T)) %>% 
  #mutate(round(.[4:5], digits = 0))
  mutate(`Non-student` = perc_ns*2.17, Student = perc_s*2.19) %>% 
  select(reisemiddel, `Non-student`, Student) %>% 
  pivot_longer(!reisemiddel, names_to = "plot", values_to = "pros") %>% 
  ggplot(aes( label = pros)) +
  geom_bar(aes(x = plot, y = pros, fill = reisemiddel), position = "stack", stat = "identity")+
  coord_flip() +
  theme(legend.title = element_blank(), legend.position = c(0.83,0.5), text = element_text(size = 7), legend.key.size = unit(0.4, "cm"),
        legend.background = element_rect(fill = alpha("gray93", 0.3))) +
  labs(x = "", y = "Average number of trips in a day") +
  ylim(0,3.5) +
  annotate("text", x = 2,  y = 1.9, label = "Student average = 2.19", size = 2) +
  annotate("text", x = 1,  y = 1.7, label = "Non-student average = 2.17", size = 2) +
  guides(fill=guide_legend(ncol=2))

ggsave(path = "RVUcorona_ggsave_output" ,"trip_student_mode_bar.png", dpi = 300, units = "mm", width = 160, height = 30) 


# diverse  ---------------------------------------------------------------------






# facet: formål, reisemiddel

reisefil_0 %>% 
  filter(!is.na(formål), !is.na(reisemiddel)) %>% 
  ggplot(aes(x = reisemiddel)) +
  stat_count(aes( y=..prop.., group=formål)) +
  facet_wrap(~ formål) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        strip.text.x = element_text(size = 8)) +
  labs(x = "", y = "Percentage")

ggsave(path = "RVUcorona_ggsave_output" ,"reisemiddel_formål_facet.png", dpi = 300, units = "mm", width = 160, height = 120)

# facet: formål, reisetid, BAR
reisefil_0 %>% 
  filter(!is.na(formål), !is.na(reisetid)) %>% 
  ggplot(aes(x = reisetid)) +
  stat_count(aes( y=..prop.., group=formål)) +
  facet_wrap(~ formål) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        strip.text.x = element_text(size = 8)) +
  scale_x_continuous(limits = c(0,120), breaks = seq(0,120,15)) +
  labs(x = "", y = "Percentage", title = "Distribution of trip time per trip purpose [minutes]")
ggsave(path = "RVUcorona_ggsave_output" ,"reisetid_formål_facet.png", dpi = 300, units = "mm", width = 160, height = 120)

# facet: formål, reisetid, LINE
reisefil_0 %>% 
  filter(!is.na(formål), !is.na(reisetid)) %>% 
  ggplot(aes(x = reisetid)) +
  geom_line(aes(y = ..density..), stat = 'density', size = 0.8) +
  #stat_count(aes( y=..prop.., group=formål)) +
  facet_wrap(~ formål) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        strip.text.x = element_text(size = 8)) +
  scale_x_continuous(limits = c(0,120), breaks = seq(0,120,15)) +
  labs(x = "", y = "Percentage", title = "Distribution of trip time per trip purpose [minutes]")
ggsave(path = "RVUcorona_ggsave_output" ,"reisetid_line_formål_facet.png", dpi = 300, units = "mm", width = 160, height = 120)













saveWorkbook(excelRVU, file = "excelRVU.xlsx", overwrite = TRUE)


