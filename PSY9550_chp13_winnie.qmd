---
title: "PSY9550 2024 exercises for chapter 13"
author: "Winnie"
date: 05-06-2024
format:
  html:
    toc: true
    toc-location: left
    embed-resources: true
    page-layout: full
    html-math-method: katex
editor: source
---

```{css, echo = F}
body{
  font-family: Helvetica;
  font-size: 16pt;
  max-width: 1000px;
  margin: auto;
  margin-left:310px;
}
pre{
  font-size: 14px;
}
/* Headers */
h1{
    font-size: 24pt;
  }
h1,h2{
    font-size: 20pt;
  }
h3,h4,h5,h6{
  font-size: 18pt;
}
#TOC {
  position: fixed;
  left: 0;
  top: 0;
  width: 300px;
  height: 100%;
  overflow:auto;
}
```

```{r setup,}
#| include: false
#| message: false
#| warning: false
#| results: hide
knitr::opts_chunk$set(echo = TRUE, dpi = 300)

library(rethinking)
library(magrittr)
library(tidyverse)
library(rstan)
library(bayesplot)
library(xfun)  # resetting RSTudio

Sys.setlocale("LC_ALL", 'en_US.UTF-8')
# add other packages you use here
```

# Clarification and or discussion questions


I was not able to finish 13M1 entirely as for the model with an interaction term: S ~tank + pred*size.  (You can find the problem by searching BANANABREAD)

I wanted to calculate the pâ€™s for variation among ponds (marginal pond, not the average pond) while making a p_link_sim() function like in the book. Because when calculating the logodds I thought(?) I had to vary the variable/input values across the whole range. Like when getting the logodds I thought I had to calculate them with both size = (1,2), and pred_size4 = (1,4). BECAUSE when call the function p_link_sim() we do calculate the logodds with pred varying, pred = (1,2).


p_link_asim_interact <- function( pred , size = 1, pred_size4 = 1) { 
  logodds1 <- post$a_sim + post$b_pred[,pred] + post$b_size[,size] + ?????? # WRITE INTERACTION HERE. BANANABREAD 
  logodds2 <- post$a_sim + post$b_pred[,pred] + post$b_size[,size+1] + ????
  logodds <- c(sample(logodds1, length(logodds1)/2), 
                   sample(logodds2, length(logodds2)/2)
                   )
  return( inv_logit(logodds) ) 
}

p_raw_sim <- sapply(1:2, function(m) p_link_asim(m))


# Easy

## 13E1. Which of the following priors will produce more shrinkage in the estimates? a or b

**(a) alpha_tank \~ Normal(0, 1)**

**(b) alpha_tank \~ Normal(0, 2).**

Option (a) will produce more shrinkage due to a narrower distribution (sd being 1 instead of 2).

## 13E2. Rewrite the following model into a multilevel model.

![](images/clipboard-674088292.png)

```{r, eval=FALSE}
m13.e2 <- ulam(
  alist(
    y ~ dbinom(1, p),
    logit(p) <- a[group] + b,
    # level 1 priors
    a[group] ~ dnorm(a_bar, sigma_a),
    b ~ dnorm(0, 0.5),
   
    # level 2 priors
    a_bar ~ dnorm(0, 1.5),
    sigma_a ~ dexp(1)
    
  ), xxxxx
)

```

## 13E3. Rewrite the following model into a multilevel model.

![](images/clipboard-937057870.png)

```{r, eval=FALSE}
m13.e3 <- ulam(
  alist(
    y ~ dnorm(mu, sigma),
    mu <- a[group] + b,
    
    # level 1 priors
    a[group] ~ dnorm(a_bar, sigma_a),
    b ~ dnorm(0, 1),
    sigma ~ dexp(1),
    
    # level 2 priors
    a_bar ~ dnorm(0, 1.5),
    sigma_a ~ dexp(1)
    
  ), xxxxx
)

```

## 13E4. Write a mathematical model formula for a Poisson regression with varying intercepts. 

```{r, eval=FALSE}
m13.e4 <- ulam(
  alist(
    y ~ dpois(lambda),
    log(lambda) <- a[group],
    # level 1 priors
    a[group] ~ dnorm(a_bar, sigma_a), 
    # level 2 priors
     a_bar ~ dnorm(0, 1.5), #intercept for each group
    sigma_a ~ dexp(1)  # variation among groups
  ), xxxxx
)

```

## 13E5. Write a mathematical model formula for a Poisson regression with two different kinds of varying intercepts, a cross-classified model.

```{r, eval=FALSE}

m13.e5 <- ulam(
  alist(
    y ~ dpois(lambda),
    log(lambda) <- a[group] + b[var2],
    # level 1 priors
    a[group] ~ dnorm(a_bar, sigma_a),
    b[var2] ~ dnorm(b_bar, sigma_b),
    
    # level 2 priors
    a_bar ~ dnorm(0, 1.5),
    b_bar~ dnorm(0, 1.5),
    sigma_a ~ dexp(1),
    sigma_b ~ dexp(1)
  ), xxxxx
)



```

# Medium

## 13M1. Reedfrogs \~ + predation + size 

Revisit the Reed frog survival data, data(reedfrogs), and add the predation and size treatment variables to the varying intercepts model. Consider models with either:

1.  main effect alone
2.  both main effects
3.  as well as a model including both and their interaction

Instead of focusing on inferences about these two predictor variables, focus on the inferred variation across tanks. Explain why it changes as it does across models.

```{r}
data(reedfrogs)
str(reedfrogs)


```
Description of variables in the dataset (?reedfrogs):
density
initial tadpole density (number of tadpoles in a 1.2 x 0.8 x 0.4 m tank) [experiment 1]

pred
factor: predators present or absent [experiment 1]

size
factor: big or small tadpoles [experiment 1]

surv
number surviving

propsurv
proportion surviving (=surv/density) [experiment 1]


```{r}
d <- reedfrogs %>% 
  mutate(tank = 1:nrow(.),
         across(!propsurv, ~as.integer(.))) %>% 
  group_by(pred, size) %>%
  mutate(pred_size4 = cur_group_id()) %>% 
  ungroup()

str(d)
```


Make dat list:

```{r}
dat <- list(
  S = d$surv, 
  N = d$density, 
  tank = d$tank,
  pred = d$pred, # 1: no pred, 2: pred
  size = d$size,  # 1:big, 2: small
  pred_size4 = d$pred_size4
)

```

Making the varying intecept model without pred and size. Thereafter making each a model with pred or size. 
(There were warnings messages about chains not mixing, and for the model with pred I tried non-center parameterization, though it had limited effect on the R-hat). The warning messages do suggest to run the estimations with more iterations, but I might do that if I got time.

```{r, message=FALSE}


m13.m1_0 <- ulam( 
  alist(
    S ~ dbinom( N , p ) , 
    logit(p) <- a[tank], 
    # level 1 priors
    a[tank] ~ dnorm( a_bar , sigma_a ) , 
    # level 2 priors
    a_bar ~ dnorm( 0 , 1.5 ) ,
    sigma_a ~ dexp( 1 )
    
    ), data=dat , chains=4 , log_lik=TRUE 
  )

m13.m1_pred <- ulam( 
  alist( 
    S ~ dbinom( N , p ) , 
    logit(p) <- a[tank] + b_pred[pred], 
    # level 1 priors
    a[tank] ~ dnorm( a_bar , sigma_a ) , 
    b_pred[pred] ~ dnorm(0, 1),
    # level 2 priors
    a_bar ~ dnorm( 0 , 1.5 ) ,
    sigma_a ~ dexp( 1 )
    
    ), data=dat , chains=4 , log_lik=TRUE 
  )

m13.m1_pred_nc <- ulam( 
  alist( 
    S ~ dbinom( N , p ) , 
    logit(p) <- a_bar + z[tank]*sigma_a + b_pred[pred], 
   
     # level 1 priors
    z[tank] ~ normal( 0, 1), 
    b_pred[pred] ~ dnorm(0, 1),
    a_bar ~ dnorm( 0 , 1.5 ),
    sigma_a ~ dexp( 1 ),
    gq > vector[tank]:a <<- a_bar + z*sigma_a
    ), data=dat , chains=4 , log_lik=TRUE 
  )

```

...rest of the models. 
survival ~ tank + size,
s ~ tank + size + pred
s ~ tank + size*pred

```{r}
m13.m1_size <- ulam( 
  alist( 
    S ~ dbinom( N , p ) , 
    logit(p) <- a[tank] + b_size[size], 
    # level 1 priors
    a[tank] ~ dnorm( a_bar , sigma_a ) , 
    b_size[size] ~ dnorm(0, 1),
    # level 2 priors
    a_bar ~ dnorm( 0 , 1.5 ) ,
    sigma_a ~ dexp( 1 )
    
    ), data=dat , chains=4 , log_lik=TRUE 
  )

m13.m1_pred_size <- ulam( 
  alist( 
    S ~ dbinom( N , p ) , 
    logit(p) <- a[tank] + b_size[size] + b_pred[pred], 
    # level 1 priors
    a[tank] ~ dnorm( a_bar , sigma_a ) , 
    b_size[size] ~ dnorm(0, 1),
    b_pred[pred] ~ dnorm(0, 1),
    # level 2 priors
    a_bar ~ dnorm( 0 , 1.5 ) ,
    sigma_a ~ dexp( 1 )
    
    ), data=dat , chains=4 , log_lik=TRUE 
  )


m13.m1_pred_size_interact <- ulam( 
  alist( 
    S ~ dbinom( N , p ) , 
    logit(p) <- a[tank] + b_size[size] + b_pred[pred] + b_pred_size[pred_size4], 
    # level 1 priors
    a[tank] ~ dnorm( a_bar , sigma_a ) , 
    b_size[size] ~ dnorm(0, 1),
    b_pred[pred] ~ dnorm(0, 1),
    b_pred_size[pred_size4] ~ dnorm(0, 1),
    # level 2 priors
    a_bar ~ dnorm( 0 , 1.5 ) ,
    sigma_a ~ dexp( 1 )
    
    ), data=dat , chains=4 , log_lik=TRUE 
  )


```


```{r}
compare(m13.m1_0, m13.m1_pred, m13.m1_pred_nc, m13.m1_size, m13.m1_pred_size, m13.m1_pred_size_interact)
```
Hmm, when comparing the models (with the aim of predicting survival rate for frogs in ponds), WAIC show that the models with the preditor variable fits the data slightly better than the others. Many of the estimated coefficients in the model has a R-hat above 1.03 though.
The estimated intercepts have all big errors/variation.

```{r}
precis(m13.m1_pred, depth = 2)
# precis(m13.m1_pred, depth = 2)[48:52,]

```

Drawing some samples from the pred-model and see how the lines look. Well, yeah, it seems like having predators present to the frog ponds do influence the chance of frog survival. This figure highlights the effect of predators on the average pond. The next figure will show the variations among ponds according to the model.

```{r}
post <- extract.samples(m13.m1_pred) # 2000 samples

p_link_abar <- function( pred ) { 
  logodds <- post$a_bar + post$b_pred[,pred]  
  return( inv_logit(logodds) ) 
  }


# 1:2 for pred. Look into tank 45.
p_raw <- sapply(1:2, function(m) p_link_abar(m))
p_mu <- apply(p_raw, 2, mean)
p_ci <- apply(p_raw, 2, PI)

# density_seq <- seq(0, max(d$density)+10, length.out = 3000) 
plot( propsurv ~ pred , data=d ,
      xlab = "predator. 1 = no, 2 = yes", ylab= "proportion survival",
      main = "average pond")
axis(1, at = 1:2, labels = c("no predators near pond", "predators present"))
lines( 1:2, p_mu , lwd=2, col = "blue" ) 
shade( p_ci , 1:2,  col = alpha("blue", 0.5) )

```

```{r}

post$a_sim <- rnorm( length(post$a_bar) , post$a_bar , post$sigma_a ) 

# as to catch the variation in ponds that we made room for in the model by defining sigma_a, we simulate ponds (see line above) based on a_bar and sigma_a.

  logodds_fasit <- post$a_sim + post$b_pred[,1] 

p_link_asim <- function( pred ) { 
  logodds <- post$a_sim + post$b_pred[,pred] 
  return( inv_logit(logodds) ) 
  }

p_raw_sim <- sapply(1:2, function(m) p_link_asim(m))
p_mu_sim <- apply(p_raw_sim, 2, mean)
p_ci_sim <- apply(p_raw_sim, 2, PI)

plot( propsurv ~ pred , data=d ,
      xlab = "predator. 1 = no, 2 = yes", ylab= "proportion survival",
      main = "variations among ponds")
axis(1, at = 1:2, labels = c("no predators near pond", "predators present"))
lines( 1:2, p_mu_sim , lwd=2, col = "lightblue" ) 
shade( p_ci_sim , 1:2,  col = alpha("lightblue", 0.5) )
```




The assignment specified: "Instead of focusing on inferences about these two predictor variables, focus on the inferred variation across tanks. Explain why it changes as it does across models."

I understand it as we want to look further into the marginal variation between the ponds by the different models. So, I want to make a code that goes through all the models that plot this marginal pond variation beside each other. Of all the models only three included the preditor variable, so we will focus on these.

```{r}
coeftab(m13.m1_0, m13.m1_pred, m13.m1_size, m13.m1_pred_size, m13.m1_pred_size_interact)
```
```{r}

# write function that extract samples = post, calculate a_sim, then into p_raw, then into p_mu, p_ci, which draws them

# loop over the models in a list
model_list <- list( m13.m1_pred, m13.m1_pred_size, m13.m1_pred_size_interact)
colors <- rainbow(length(model_list))

p_link_asim_size <- function( pred , size = 1) { 
  #getting logodds for when size = 1
  logodds1 <- post$a_sim + post$b_pred[,pred] + post$b_size[,size] 
  # getting logodds for when size = 2
  logodds2 <- post$a_sim + post$b_pred[,pred] + post$b_size[,size+1] 
  # draws 50/50 from logodds1 and logodds2
  logodds <- c(sample(logodds1, length(logodds1)/2), 
                   sample(logodds2, length(logodds2)/2)
                   )
  return( inv_logit(logodds) ) 
}

# vet virkelig ikke hvordan jeg skal hente ut ?????
p_link_asim_interact <- function( pred , size = 1, pred_size4 = 1) { 
  logodds1 <- post$a_sim + post$b_pred[,pred] + post$b_size[,size] # WRITE INTERACTION HERE. BANANABREAD 
  logodds2 <- post$a_sim + post$b_pred[,pred] + post$b_size[,size+1] 
  logodds <- c(sample(logodds1, length(logodds1)/2), 
                   sample(logodds2, length(logodds2)/2)
                   )
  return( inv_logit(logodds) ) 
}

# the index i is given that the order in model_list stay exactly like that (pred, pred_size, pred_size_interact)

draw_extract <- function(i) {
  post <- extract.samples(model_list[[i]])
  post$a_sim <- rnorm( length(post$a_bar) , post$a_bar , post$sigma_a ) 
  
  if (i == 1) {
    p_raw_sim <- sapply(1:2, function(m) p_link_asim(m))
    
  } else if (i == 2) {
    p_raw_sim <- sapply(1:2, function(m) p_link_asim_size(m))
  } else {
    p_raw_sim <- sapply(1:2, function(m) p_link_asim_interact(m))
  }
  
  p_mu_sim <- apply(p_raw_sim, 2, mean)
  p_ci_sim <- apply(p_raw_sim, 2, PI)
  
  lines( 1:2, p_mu_sim , lwd=2, col = colors[i]) 
  shade( p_ci_sim , 1:2,  col = alpha(colors[i], 0.5) )
}


```

```{r}

#not sure what im doing here compared to the other code chunks. im confused

# pred = 1.2
p <- link( m13.m1_pred_size , data=data.frame( pred=c(1,2), size = c(1,2), tank = 48  ) ) 
p_mu <- apply( p , 2 , mean ) 
p_ci <- apply( p , 2 , PI ) 

plot( propsurv ~ pred , data=d ,
      xlab = "predator. 1 = no, 2 = yes", ylab= "proportion survival",
      main = "variations among ponds. pred-size model")
axis(1, at = 1:2, labels = c("no predators near pond", "predators present"))
lines( 1:2, p_mu , lwd=2, col = "lightblue" ) 
shade( p_ci , 1:2,  col = alpha("lightblue", 0.5) )

```




```{r}
par(mfrow = c(1, length(model_list)))
plot( propsurv ~ pred , data=d ,
      xlab = "predator. 1 = no, 2 = yes", ylab= "proportion survival",
      main = "variations among ponds")
axis(1, at = 1:2, labels = c("no predators near pond", "predators present"))
plot_lines <- sapply(1:length(model_list), function(i) draw_extract(i))


```

```{r}
# p_link for the pred-size model. BUT how to get the total p using size too

post <- extract.samples(m13.m1_pred_size)
post$a_sim <- rnorm( length(post$a_bar) , post$a_bar , post$sigma_a ) 


p_link_asim_size <- function( pred , size = 1) { 
  logodds1 <- post$a_sim + post$b_pred[,pred] + post$b_size[,size] 
  logodds2 <- post$a_sim + post$b_pred[,pred] + post$b_size[,size+1] 
  logodds <- c(sample(logodds1, length(logodds1)/2), 
                   sample(logodds2, length(logodds2)/2)
                   )
  return( inv_logit(logodds) ) 
}



```

```{r}
##########  
p_raw_sim <- sapply(1:2, function(i) p_link_asim_size(i))
p_mu_sim <- apply(p_raw_sim, 2, mean)
p_ci_sim <- apply(p_raw_sim, 2, PI)

plot( propsurv ~ pred , data=d ,
      xlab = "predator. 1 = no, 2 = yes", 
      ylab= "proportion survival",
      main = "variations among ponds")
axis(1, at = 1:2, labels = c("no predators near pond", "predators present"))
lines( 1:2, p_mu_sim , lwd=2, col = "lightblue" ) 
shade( p_ci_sim , 1:2,  col = alpha("lightblue", 0.5) )

```

## 13M2. Compare the models you fit just above, using WAIC. Can you reconcile the differences in WAIC with the posterior distributions of the models?

I didnt finish plotting posterior distributions for the different models. 
